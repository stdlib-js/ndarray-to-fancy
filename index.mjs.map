{"version":3,"file":"index.mjs","sources":["../lib/has_proxy_support.js","../lib/set_element_wrapper.js","../lib/get_ndarray_wrapper.js","../lib/validate.js","../lib/validator.js","../lib/is_multislice_string.js","../lib/is_slice_string.js","../lib/re_integer.js","../lib/is_integer_string.js","../lib/re_subseq.js","../lib/is_subsequence_string.js","../lib/is_ellipsis_string.js","../lib/is_empty_string.js","../lib/parse_multislice.js","../lib/parse_slice.js","../lib/parse_integer.js","../lib/prop2slice.0d.js","../lib/prop2slice.1d.js","../lib/prop2slice.nd.js","../lib/ctor.js","../lib/resolve_index.js","../lib/getter.js","../lib/setter.js","../lib/re_ndindex.js","../lib/is_ndindex_string.js","../lib/re_cartesian_index.js","../lib/is_cartesian_index_string.js","../lib/resolve_subscripts.js","../lib/error_message.js","../lib/get.js","../lib/get_element.js","../lib/get_value.js","../lib/get_cartesian.js","../lib/get_slice.js","../lib/set_value.js","../lib/set_slice.js","../lib/set.js","../lib/set_element.js","../lib/set_cartesian.js","../lib/factory.js","../lib/defaults.js","../lib/prop2slice.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Proxy from '@stdlib/proxy-ctor';\n\n\n// MAIN //\n\n/**\n* Boolean indicating if an environment has Proxy support.\n*\n* @private\n* @name hasSupport\n* @type {boolean}\n*/\nvar hasSupport = ( typeof Proxy === 'function' ); // NOTE: cannot use `@stdlib/assert/has-proxy-support` here, as that API uses code evaluation and might violate CSPs; consequently, this is a relatively weak check for proxy support\n\n\n// EXPORTS //\n\nexport default hasSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplexDataType from '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\n\n\n// FUNCTIONS //\n\n/**\n* Normalizes values assigned to complex number ndarrays.\n*\n* @private\n* @param {*} value - input value\n* @returns {(ComplexLike|*)} output value\n*/\nfunction wrapComplex( value ) {\n\t// Wrap real-valued scalars as valid input arguments to complex number ndarrays...\n\tif ( isNumber( value ) ) {\n\t\treturn [ value, 0.0 ]; // note: we're assuming that a complex number ndarray setter accepts an array of interleaved real and imaginary components\n\t}\n\t// For everything other than a real-valued scalar, we delegate validation to the target complex number ndarray:\n\treturn value;\n}\n\n\n// MAIN //\n\n/**\n* Returns a wrapper function for processing scalar input values before assignment.\n*\n* @private\n* @param {string} dtype - ndarray data type\n* @returns {(Function|null)} wrapper function or null\n*/\nfunction wrapper( dtype ) {\n\tif ( isComplexDataType( dtype ) ) {\n\t\treturn wrapComplex;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default wrapper;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a wrapper function for processing ndarrays after retrieval.\n*\n* @private\n* @param {Function} ndarray2fancy - function for creating a proxied ndarray\n* @param {Object} opts - options\n* @param {boolean} opts.strict - boolean indicating whether to perform strict bounds checking\n* @param {Function} opts.cache - cache for resolving ndarray index objects\n* @returns {Function} wrapper function\n*/\nfunction wrapper( ndarray2fancy, opts ) {\n\treturn wrap;\n\n\t/**\n\t* Returns a proxied ndarray.\n\t*\n\t* @private\n\t* @param {ndarray} x - input ndarray\n\t* @returns {ndarray} proxied ndarray\n\t*/\n\tfunction wrap( x ) {\n\t\treturn ndarray2fancy( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrapper;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isMethodIn from '@stdlib/assert-is-method-in';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @param {Function} [options.cache] - cache for resolving array index objects\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'strict': false\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'null2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\topts.strict = options.strict;\n\t\tif ( !isBoolean( opts.strict ) ) {\n\t\t\treturn new TypeError( format( 'null2o', 'strict', opts.strict ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'cache' ) ) {\n\t\topts.cache = options.cache;\n\t\tif ( !isMethodIn( opts.cache, 'get' ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option is missing a `%s` method. Option: `%s`.', 'cache', 'get', opts.cache ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isRealFloatingDataType from '@stdlib/ndarray-base-assert-is-real-floating-point-data-type';\nimport isUnsignedIntegerDataType from '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type';\nimport isSignedIntegerDataType from '@stdlib/ndarray-base-assert-is-signed-integer-data-type';\nimport isBooleanDataType from '@stdlib/ndarray-base-assert-is-boolean-data-type';\nimport isSafeCast from '@stdlib/ndarray-base-assert-is-safe-data-type-cast';\nimport minDataType from '@stdlib/ndarray-min-dtype';\nimport minSignedIntegerDataType from '@stdlib/ndarray-base-min-signed-integer-dtype';\nimport complexDataType from '@stdlib/complex-dtype';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a \"generic\" or unknown data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {null} null\n*\n* @example\n* var err = validateGeneric( 3, 'generic' );\n* // returns null\n*/\nfunction validateGeneric() {\n\treturn null;\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a boolean data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = validateBoolean( true, 'bool' );\n* // returns null\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var err = validateBoolean( new Complex128( 5.0, 6.0 ), 'bool' );\n* // returns <TypeError>\n*/\nfunction validateBoolean( value, dtype ) {\n\tif ( isBoolean( value ) ) {\n\t\treturn null;\n\t}\n\treturn new TypeError( format( 'nullEw', typeof value, dtype ) );\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a real-valued floating-point data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = validateRealFloating( 3.14, 'float64' );\n* // returns null\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var err = validateRealFloating( new Complex128( 5.0, 6.0 ), 'float64' );\n* // returns <TypeError>\n*/\nfunction validateRealFloating( value, dtype ) {\n\tif ( isNumber( value ) ) {\n\t\treturn null;\n\t}\n\tif ( isComplexLike( value ) ) {\n\t\treturn new TypeError( format( 'nullEw', complexDataType( value ), dtype ) );\n\t}\n\treturn new TypeError( format( 'nullEw', typeof value, dtype ) );\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a complex-valued floating-point data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var err = validateComplexFloating( new Complex128( 5.0, 6.0 ), 'complex128' );\n* // returns null\n*\n* @example\n* var err = validateComplexFloating( {}, 'complex128' );\n* // returns <TypeError>\n*/\nfunction validateComplexFloating( value, dtype ) {\n\tif ( isNumber( value ) || isComplexLike( value ) ) {\n\t\treturn null;\n\t}\n\treturn new TypeError( format( 'nullEw', typeof value, dtype ) );\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a signed integer data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = validateSignedInteger( 3, 'int32' );\n* // returns null\n*\n* @example\n* var err = validateSignedInteger( 3.14, 'int32' );\n* // returns <TypeError>\n*/\nfunction validateSignedInteger( value, dtype ) {\n\tvar vdt;\n\tif ( isNumber( value ) ) {\n\t\tif ( !isInteger( value ) ) {\n\t\t\treturn new TypeError( format( 'nullEw', minDataType( value ), dtype ) );\n\t\t}\n\t\tvdt = minSignedIntegerDataType( value );\n\t\tif ( isSafeCast( vdt, dtype ) ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new TypeError( format( 'nullEw', vdt, dtype ) );\n\t}\n\tif ( isComplexLike( value ) ) {\n\t\treturn new TypeError( format( 'nullEw', complexDataType( value ), dtype ) );\n\t}\n\treturn new TypeError( format( 'nullEw', typeof value, dtype ) );\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having an unsigned integer data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = validateUnsignedInteger( 3, 'uint32' );\n* // returns null\n*\n* @example\n* var err = validateUnsignedInteger( -3, 'uint32' );\n* // returns <TypeError>\n*/\nfunction validateUnsignedInteger( value, dtype ) {\n\tvar vdt;\n\tif ( isNumber( value ) ) {\n\t\tvdt = minDataType( value ); // note: we rely on data type resolution to handle the case where `value` is a non-integer value. In that case, `vdt` will resolve to a floating-point data type and `isSafeCast` will evaluate to `false`\n\t\tif ( isSafeCast( vdt, dtype ) ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new TypeError( format( 'nullEw', vdt, dtype ) );\n\t}\n\tif ( isComplexLike( value ) ) {\n\t\treturn new TypeError( format( 'nullEw', complexDataType( value ), dtype ) );\n\t}\n\treturn new TypeError( format( 'nullEw', typeof value, dtype ) );\n}\n\n\n// MAIN //\n\n/**\n* Returns a validation function for verifying whether a provided value can be safely assigned to an element in an array having a specified data type.\n*\n* @private\n* @param {string} dtype - array data type\n* @returns {Function} validation function\n*\n* @example\n* var fcn = validator( 'int32' );\n*\n* var err = fcn( 3, 'int32' );\n* // returns null\n*\n* err = fcn( 3.14, 'int32' );\n* // returns <TypeError>\n*/\nfunction validator( dtype ) {\n\tif ( dtype === 'generic' || dtype === '' ) {\n\t\treturn validateGeneric;\n\t}\n\tif ( isRealFloatingDataType( dtype ) ) {\n\t\treturn validateRealFloating;\n\t}\n\tif ( isUnsignedIntegerDataType( dtype ) ) {\n\t\treturn validateUnsignedInteger;\n\t}\n\tif ( isSignedIntegerDataType( dtype ) ) {\n\t\treturn validateSignedInteger;\n\t}\n\tif ( isBooleanDataType( dtype ) ) {\n\t\treturn validateBoolean;\n\t}\n\t// Case: isComplexDataType( dtype ) === true\n\treturn validateComplexFloating;\n}\n\n\n// EXPORTS //\n\nexport default validator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport startsWith from '@stdlib/string-base-starts-with';\n\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is a serialized MultiSlice object.\n*\n* @private\n* @param {string} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isMultiSliceString( 'MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))' );\n* // returns true\n*\n* @example\n* var out = isMultiSliceString( ':' );\n* // returns false\n*/\nfunction isMultiSliceString( prop ) {\n\treturn (\n\t\tprop[ 0 ] === 'M' &&\n\t\tstartsWith( prop, 'MultiSlice(', 0 ) &&\n\t\tprop[ prop.length-1 ] === ')'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isMultiSliceString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport startsWith from '@stdlib/string-base-starts-with';\n\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is a serialized Slice object.\n*\n* @private\n* @param {string} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isSliceString( 'Slice(0,10,2)' );\n* // returns true\n*\n* @example\n* var out = isSliceString( ':' );\n* // returns false\n*/\nfunction isSliceString( prop ) {\n\treturn (\n\t\tprop[ 0 ] === 'S' &&\n\t\tstartsWith( prop, 'Slice(', 0 ) &&\n\t\tprop[ prop.length-1 ] === ')'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isSliceString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is an integer string.\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*\n* @example\n* var bool = RE_INTEGER.test( '10' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '-1' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '0:10:2' );\n* // returns false\n*/\nvar RE_INTEGER = /^-?[0-9]+$/;\n\n\n// EXPORTS //\n\nexport default RE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport RE_INTEGER from './re_integer.js';\n\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is an integer.\n*\n* @private\n* @param {(string|symbol)} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isIntegerString( '1' );\n* // returns true\n*\n* @example\n* var out = isIntegerString( ':' );\n* // returns false\n*/\nfunction isIntegerString( prop ) {\n\treturn ( isString( prop ) && RE_INTEGER.test( prop ) );\n}\n\n\n// EXPORTS //\n\nexport default isIntegerString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is a subsequence string.\n*\n* @private\n* @name RE_SUBSEQ\n* @type {RegExp}\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0:10:2' );\n* // returns true\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0' );\n* // returns false\n*\n* @example\n* var bool = RE_SUBSEQ.test( 'Slice(0,10,2)' );\n* // returns false\n*/\nvar RE_SUBSEQ = /:/;\n\n\n// EXPORTS //\n\nexport default RE_SUBSEQ;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport RE_SUBSEQ from './re_subseq.js';\n\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is a subsequence.\n*\n* @private\n* @param {string} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isSubsequenceString( '::-2' );\n* // returns true\n*\n* @example\n* var out = isSubsequenceString( '10,1,::-1,:,-5,2::3' );\n* // returns true\n*\n* @example\n* var out = isSubsequenceString( '...' );\n* // returns false\n*\n* @example\n* var out = isSubsequenceString( '-2' );\n* // returns false\n*/\nfunction isSubsequenceString( prop ) {\n\t// TODO: consider whether to make this check more robust (e.g., should we actually throw if someone tries to access `foo:bar`? If we make this check more exact, how would we distinguish between a non-existent `foo:bar` property and an actual error in the subsequence string?)\n\treturn RE_SUBSEQ.test( prop );\n}\n\n\n// EXPORTS //\n\nexport default isSubsequenceString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is an ellipsis expression.\n*\n* @private\n* @param {string} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isEllipsisString( '...' );\n* // returns true\n*\n* @example\n* var out = isEllipsisString( '::-2' );\n* // returns false\n*\n* @example\n* var out = isEllipsisString( '-2' );\n* // returns false\n*/\nfunction isEllipsisString( prop ) {\n\treturn ( prop === '...' );\n}\n\n\n// EXPORTS //\n\nexport default isEllipsisString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is an empty string.\n*\n* @private\n* @param {string} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isEmptyString( '' );\n* // returns true\n*\n* @example\n* var out = isEmptyString( '...' );\n* // returns false\n*\n* @example\n* var out = isEmptyString( '-2' );\n* // returns false\n*/\nfunction isEmptyString( prop ) {\n\treturn ( prop === '' );\n}\n\n\n// EXPORTS //\n\nexport default isEmptyString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport str2multislice from '@stdlib/slice-base-str2multislice';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Parses a serialized MultiSlice object.\n*\n* @private\n* @param {string} raw - original unprocessed input string\n* @param {string} str - serialized MultiSlice object\n* @throws {Error} invalid slice operation\n* @returns {MultiSlice} MultiSlice object\n*\n* @example\n* var s = parseMultiSlice( '  MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))  ', 'MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))' );\n* // returns <MultiSlice>\n*/\nfunction parseMultiSlice( raw, str ) {\n\tvar s = str2multislice( str );\n\tif ( s === null ) {\n\t\tthrow new Error( format( 'nullEn', raw ) );\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default parseMultiSlice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport str2slice from '@stdlib/slice-base-str2slice';\nimport MultiSlice from '@stdlib/slice-multi';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Parses a serialized Slice object.\n*\n* @private\n* @param {string} raw - original unprocessed input string\n* @param {string} str - serialized Slice object\n* @throws {Error} invalid slice operation\n* @returns {MultiSlice} MultiSlice object\n*\n* @example\n* var s = parseSlice( '  Slice(0,10,2)  ', 'Slice(0,10,2)' );\n* // returns <MultiSlice>\n*/\nfunction parseSlice( raw, str ) {\n\t// Convert the string to a slice object:\n\tvar s = str2slice( str );\n\tif ( s === null ) {\n\t\tthrow new Error( format( 'nullEn', raw ) );\n\t}\n\t// Create a multi-slice:\n\treturn new MultiSlice( s );\n}\n\n\n// EXPORTS //\n\nexport default parseSlice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport MultiSlice from '@stdlib/slice-multi';\n\n\n// MAIN //\n\n/**\n* Parses a serialized integer.\n*\n* @private\n* @param {string} raw - original unprocessed input string\n* @param {string} str - serialized integer\n* @returns {MultiSlice} MultiSlice object\n*\n* @example\n* var s = parseInteger( '  1  ', '1' );\n* // returns <MultiSlice>\n*/\nfunction parseInteger( raw, str ) {\n\treturn new MultiSlice( parseInt( str, 10 ) );\n}\n\n\n// EXPORTS //\n\nexport default parseInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport trim from '@stdlib/string-base-trim';\nimport replace from '@stdlib/string-base-replace';\nimport MultiSlice from '@stdlib/slice-multi';\nimport seq2multislice from '@stdlib/slice-base-seq2multislice';\nimport getShape from '@stdlib/ndarray-base-shape';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport isMultiSlice from './is_multislice_string.js';\nimport isSlice from './is_slice_string.js';\nimport isInteger from './is_integer_string.js';\nimport isSubsequence from './is_subsequence_string.js';\nimport isEllipsis from './is_ellipsis_string.js';\nimport isEmptyString from './is_empty_string.js';\nimport parseMultiSlice from './parse_multislice.js';\nimport parseSlice from './parse_slice.js';\nimport parseInteger from './parse_integer.js';\n\n\n// FUNCTIONS //\n\n/**\n* Parses a subsequence string.\n*\n* @private\n* @param {string} raw - original unprocessed input string\n* @param {string} str - subsequence string\n* @param {NonNegativeIntegerArray} shape - array dimensions\n* @throws {Error} invalid slice operation\n* @throws {RangeError} slice exceeds array bounds\n* @returns {MultiSlice} MultiSlice object\n*\n* @example\n* var s = parseSubsequence( ' ... ', '...', [], false );\n* // returns <MultiSlice>\n*/\nfunction parseSubsequence( raw, str, shape ) {\n\tvar s = seq2multislice( str, shape, true );\n\tif ( s.code ) {\n\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\tthrow new Error( format( 'nullEq', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\tthrow new Error( format( 'nullEr', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\tthrow new Error( format( 'nullEn', raw ) );\n\t\t}\n\t\t// s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS'\n\t\tthrow new RangeError( format( 'nullEv', shape.join( ',' ), replace( str, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t}\n\treturn s;\n}\n\n\n// MAIN //\n\n/**\n* Converts a zero-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property ) {\n\tvar prop = trim( property );\n\tif ( isEmptyString( prop ) || isEllipsis( prop ) ) {\n\t\treturn new MultiSlice();\n\t}\n\tif ( isSlice( prop ) ) {\n\t\treturn parseSlice( property, prop );\n\t}\n\tif ( isMultiSlice( prop ) ) {\n\t\treturn parseMultiSlice( property, prop );\n\t}\n\tif ( isInteger( prop ) ) {\n\t\treturn parseInteger( property, prop );\n\t}\n\tif ( isSubsequence( prop ) ) {\n\t\treturn parseSubsequence( property, prop, getShape( target, false ) );\n\t}\n\t// Everything else (including undefined/non-existent properties):\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default prop2slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport trim from '@stdlib/string-base-trim';\nimport replace from '@stdlib/string-base-replace';\nimport seq2multislice from '@stdlib/slice-base-seq2multislice';\nimport getShape from '@stdlib/ndarray-base-shape';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport isSlice from './is_slice_string.js';\nimport isMultiSlice from './is_multislice_string.js';\nimport isInteger from './is_integer_string.js';\nimport isSubsequence from './is_subsequence_string.js';\nimport isEllipsis from './is_ellipsis_string.js';\nimport parseMultiSlice from './parse_multislice.js';\nimport parseSlice from './parse_slice.js';\nimport parseInteger from './parse_integer.js';\n\n\n// FUNCTIONS //\n\n/**\n* Parses a subsequence string.\n*\n* @private\n* @param {string} raw - original unprocessed input string\n* @param {string} str - subsequence string\n* @param {NonNegativeIntegerArray} shape - array dimensions\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} slice exceeds array bounds\n* @returns {MultiSlice} MultiSlice object\n*\n* @example\n* var s = parseSubsequence( ' :10 ', ':10', [ 10 ], false );\n* // returns <MultiSlice>\n*/\nfunction parseSubsequence( raw, str, shape, strict ) {\n\tvar s = seq2multislice( str, shape, true );\n\tif ( s.code ) {\n\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\tthrow new Error( format( 'nullEq', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\tthrow new Error( format( 'nullEr', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\tthrow new Error( format( 'nullEn', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS' ) {\n\t\t\tthrow new RangeError( format( 'nullEv', shape.join( ',' ), replace( str, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t\t}\n\t\t// NOTE: the following error check must come last due to fall-through when in non-strict mode...\n\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\tif ( strict ) {\n\t\t\t\tthrow new RangeError( format( 'nullEp', shape.join( ',' ) ) );\n\t\t\t}\n\t\t\t// Repeat parsing, this time allowing for out-of-bounds slices:\n\t\t\ts = seq2multislice( str, shape, false );\n\t\t}\n\t}\n\treturn s;\n}\n\n\n// MAIN //\n\n/**\n* Converts a one-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property, strict ) {\n\tvar prop = trim( property );\n\tif ( isSlice( prop ) ) {\n\t\treturn parseSlice( property, prop );\n\t}\n\tif ( isMultiSlice( prop ) ) {\n\t\treturn parseMultiSlice( property, prop );\n\t}\n\tif ( isInteger( prop ) ) {\n\t\treturn parseInteger( property, prop );\n\t}\n\tif ( isSubsequence( prop ) || isEllipsis( prop ) ) {\n\t\treturn parseSubsequence( property, prop, getShape( target, false ), strict ); // eslint-disable-line max-len\n\t}\n\t// Everything else (including an empty string and undefined/non-existent properties):\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default prop2slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport trim from '@stdlib/string-base-trim';\nimport replace from '@stdlib/string-base-replace';\nimport seq2multislice from '@stdlib/slice-base-seq2multislice';\nimport sargs2multislice from '@stdlib/slice-base-sargs2multislice';\nimport getShape from '@stdlib/ndarray-base-shape';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport isSubsequence from './is_subsequence_string.js';\nimport isEllipsis from './is_ellipsis_string.js';\nimport isMultiSlice from './is_multislice_string.js';\nimport isEmptyString from './is_empty_string.js';\nimport parseMultiSlice from './parse_multislice.js';\n\n\n// FUNCTIONS //\n\n/**\n* Parses a subsequence string.\n*\n* @private\n* @param {string} raw - original unprocessed input string\n* @param {string} str - subsequence string\n* @param {NonNegativeIntegerArray} shape - array dimensions\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} slice exceeds array bounds\n* @returns {MultiSlice} MultiSlice object\n*\n* @example\n* var s = parseSubsequence( ' :10,1,::-1,:,-5,2::3 ', ':10,1,::-1,:,-5,2::3', [ 10, 10, 10, 10, 10, 10 ], false );\n* // returns <MultiSlice>\n*/\nfunction parseSubsequence( raw, str, shape, strict ) {\n\tvar s = seq2multislice( str, shape, true );\n\tif ( s.code ) {\n\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\tthrow new Error( format( 'nullEq', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\tthrow new Error( format( 'nullEr', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\tthrow new Error( format( 'nullEn', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS' || s.code === 'ERR_SLICE_INSUFFICIENT_DIMENSIONS' ) {\n\t\t\tthrow new RangeError( format( 'nullEv', shape.join( ',' ), replace( str, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t\t}\n\t\t// NOTE: the following error check must come last due to fall-through when in non-strict mode...\n\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\tif ( strict ) {\n\t\t\t\tthrow new RangeError( format( 'nullEp', shape.join( ',' ) ) );\n\t\t\t}\n\t\t\t// Repeat parsing, this time allowing for out-of-bounds slices:\n\t\t\ts = seq2multislice( str, shape, false );\n\t\t}\n\t}\n\treturn s;\n}\n\n\n// MAIN //\n\n/**\n* Converts an n-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property, strict ) {\n\tvar prop = trim( property );\n\n\t// Case: multi-slice (e.g., 'MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))')\n\tif ( isMultiSlice( prop ) ) {\n\t\treturn parseMultiSlice( property, prop );\n\t}\n\t// Case: subsequence string (e.g., '...' or ':10,1,::-1,:,-5,2::3')\n\tif ( isSubsequence( prop ) || isEllipsis( prop ) ) {\n\t\treturn parseSubsequence( property, prop, getShape( target, false ), strict ); // eslint-disable-line max-len\n\t}\n\t// Case: empty string\n\tif ( isEmptyString( prop ) ) {\n\t\t// Note that this is likely an error condition, but we explicitly handle here in order to match 1-D behavior and treat similarly to undefined/non-existing properties:\n\t\treturn null;\n\t}\n\t// Case: array syntax (e.g., x[ [ Slice(0,10,1), null, Slice(4,null,-1) ] ] or x['1,2,3,4']) or Slice or integer or arbitrary string (including undefined/non-existent properties)\n\treturn sargs2multislice( prop ); // note: will return `null` for invalid slice syntax and undefined/non-existing properties\n}\n\n\n// EXPORTS //\n\nexport default prop2slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a trap for constructing new ndarray instances.\n*\n* @private\n* @param {Function} ndarray2fancy - function for creating a proxied ndarray\n* @param {Object} opts - options\n* @param {boolean} opts.strict - boolean indicating whether to perform strict bounds checking\n* @param {Function} opts.cache - cache for resolving ndarray index objects\n* @returns {Function} handler\n*/\nfunction factory( ndarray2fancy, opts ) {\n\treturn constructor;\n\n\t/**\n\t* Trap for constructing new ndarray instances.\n\t*\n\t* @private\n\t* @param {Object} target - target object\n\t* @param {Array} args - list of constructor arguments\n\t* @param {Object} newTarget - constructor that was originally called\n\t* @returns {*} new instance\n\t*/\n\tfunction constructor( target, args ) {\n\t\tvar x;\n\t\tvar a;\n\n\t\ta = args;\n\t\tswitch ( a.length ) {\n\t\tcase 0:\n\t\t\tx = new target();\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tx = new target( a[0] );\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tx = new target( a[0], a[1] );\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tx = new target( a[0], a[1], a[2] );\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tx = new target( a[0], a[1], a[2], a[3] );\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4] );\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5] );\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5], a[6] );\n\t\t\tbreak;\n\t\tcase 8:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7] );\n\t\t\tbreak;\n\t\tcase 9:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8] ); // eslint-disable-line max-len\n\t\t\tbreak;\n\t\tcase 10:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9] ); // eslint-disable-line max-len\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// Fallback to using `apply`; however, some constructors may error if the constructor is not callable (i.e., if a constructor always requires `new`):\n\t\t\tx = target.apply( null, a );\n\t\t}\n\t\treturn ndarray2fancy( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport normalizeIndex from '@stdlib/ndarray-base-normalize-index';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Resolves an integer index from an integer string.\n*\n* ## Notes\n*\n* -   In non-strict mode, if provided an out-of-bounds index, the function returns `-1`.\n*\n* @private\n* @param {string} str - integer string\n* @param {NonNegativeInteger} max - index upper bound (exclusive)\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} index exceeds ndarray bounds\n* @returns {integer} integer index\n*\n* @example\n* var idx = resolveIndex( '-1', 10, false );\n* // returns 9\n*\n* @example\n* var idx = resolveIndex( '-20', 10, false );\n* // returns -1\n*/\nfunction resolveIndex( str, max, strict ) {\n\tvar idx;\n\tvar i;\n\n\tidx = parseInt( str, 10 );\n\ti = normalizeIndex( idx, max-1 );\n\tif ( i === -1 && strict ) {\n\t\tthrow new RangeError( format( 'invalid operation. Index exceeds ndarray bounds.' ) );\n\t}\n\treturn i;\n}\n\n\n// EXPORTS //\n\nexport default resolveIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMethodIn from '@stdlib/assert-is-method-in';\nimport getShape from '@stdlib/ndarray-base-shape'; // note: we intentionally use the \"base\" version, as every ndarray-like object should have a shape property\nimport getStrides from '@stdlib/ndarray-strides';\nimport getOrder from '@stdlib/ndarray-order';\nimport numel from '@stdlib/ndarray-base-numel';\nimport ind2sub from '@stdlib/ndarray-base-ind2sub';\nimport resolveIndex from './resolve_index.js';\n\n\n// FUNCTIONS //\n\n/**\n* Returns an ndarray element according to a linear index.\n*\n* ## Notes\n*\n* -   This function assumes the presence of an `#.iget` method, which all stdlib ndarrays are expected to have.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @param {string} idx - linear index string\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} index exceeds ndarray bounds\n* @returns {(*|void)} value\n*/\nfunction iget( x, idx, strict ) {\n\tidx = resolveIndex( idx, numel( getShape( x, false ) ), strict );\n\tif ( idx === -1 ) {\n\t\t// Even for 0-D ndarrays, where, at least in stdlib, one may provide an index argument to `iget`, always return undefined...\n\t\treturn;\n\t}\n\treturn x.iget( idx );\n}\n\n/**\n* Returns an ndarray element according to a linear index.\n*\n* ## Notes\n*\n* -   For ndarray-like objects not having an `#.iget` method, this function falls back to resolving a linear index to an array of corresponding subscripts and calling a `#.get` method, which all ndarray-like objects are expected to have.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @param {string} idx - linear index string\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} index exceeds ndarray bounds\n* @returns {(*|void)} value\n*/\nfunction get( x, idx, strict ) {\n\tvar sub;\n\tvar sh;\n\n\tsh = getShape( x, false );\n\tidx = resolveIndex( idx, numel( sh ), strict );\n\n\t// In non-strict mode, avoid triggering an exception and always return undefined if unable to resolve a linear index...\n\tif ( idx === -1 ) {\n\t\treturn;\n\t}\n\t// Convert a linear index to an array of subscripts according to the current ndarray view:\n\tsub = ind2sub( sh, getStrides( x ), 0, getOrder( x ), idx, 'throw' );\n\n\t// Use the `#.get` method, which every ndarray-like object is expected to have, in order to resolve an ndarray element:\n\treturn x.get.apply( x, sub );\n}\n\n\n// MAIN //\n\n/**\n* Returns an accessor for retrieving an ndarray element according to a linear index.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {Function} accessor function\n*/\nfunction getter( x ) {\n\tif ( isMethodIn( x, 'iget' ) ) {\n\t\treturn iget;\n\t}\n\treturn get;\n}\n\n\n// EXPORTS //\n\nexport default getter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMethodIn from '@stdlib/assert-is-method-in';\nimport getShape from '@stdlib/ndarray-base-shape'; // note: we intentionally use the \"base\" version, as every ndarray-like object should have a shape property\nimport getStrides from '@stdlib/ndarray-strides';\nimport getOrder from '@stdlib/ndarray-order';\nimport numel from '@stdlib/ndarray-base-numel';\nimport ind2sub from '@stdlib/ndarray-base-ind2sub';\nimport resolveIndex from './resolve_index.js';\n\n\n// FUNCTIONS //\n\n/**\n* Sets an ndarray element according to a linear index.\n*\n* ## Notes\n*\n* -   This function assumes the presence of an `#.iset` method, which all stdlib ndarrays are expected to have.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @param {string} idx - linear index string\n* @param {*} value - new value\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} index exceeds ndarray bounds\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction iset( x, idx, value, strict ) {\n\tidx = resolveIndex( idx, numel( getShape( x, false ) ), strict );\n\tif ( idx === -1 ) {\n\t\treturn false;\n\t}\n\tx.iset( idx, value );\n\treturn true;\n}\n\n/**\n* Sets an ndarray element according to a linear index.\n*\n* ## Notes\n*\n* -   For ndarray-like objects not having an `#.iset` method, this function falls back to resolving a linear index to an array of corresponding subscripts and calling a `#.set` method, which all ndarray-like objects are expected to have.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @param {string} idx - linear index string\n* @param {*} value - new value\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} index exceeds ndarray bounds\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction set( x, idx, value, strict ) {\n\tvar sub;\n\tvar sh;\n\n\tsh = getShape( x, false );\n\tidx = resolveIndex( idx, numel( sh ), strict );\n\n\t// In non-strict mode, avoid triggering an exception and always fail assignment if unable to resolve a linear index...\n\tif ( idx === -1 ) {\n\t\treturn false;\n\t}\n\t// Convert a linear index to an array of subscripts according to the current ndarray view:\n\tsub = ind2sub( sh, getStrides( x ), 0, getOrder( x ), idx, 'throw' );\n\n\t// Append the new value to the subscripts array:\n\tsub.push( value );\n\n\t// Use the `#.set` method, which every ndarray-like object is expected to have, in order to update an ndarray element:\n\tx.set.apply( x, sub );\n\n\treturn true;\n}\n\n\n// MAIN //\n\n/**\n* Returns an accessor for setting an ndarray element according to a linear index.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {Function} accessor function\n*/\nfunction setter( x ) {\n\tif ( isMethodIn( x, 'iset' ) ) {\n\t\treturn iset;\n\t}\n\treturn set;\n}\n\n\n// EXPORTS //\n\nexport default setter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is a serialized ndarray index.\n*\n* @private\n* @name RE_NDINDEX\n* @type {RegExp}\n*\n* @example\n* var bool = RE_NDINDEX.test( 'ndindex<0>' );\n* // returns true\n*\n* @example\n* var bool = RE_NDINDEX.test( '0' );\n* // returns false\n*\n* @example\n* var bool = RE_NDINDEX.test( 'Slice(0,10,2)' );\n* // returns false\n*/\nvar RE_NDINDEX = /\\s*ndindex<[^>]+>\\s*/;\n\n\n// EXPORTS //\n\nexport default RE_NDINDEX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport RE_NDINDEX from './re_ndindex.js';\n\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is a serialized ndarray index.\n*\n* @private\n* @param {(string|symbol)} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isArrayIndexString( 'ndindex<0>' );\n* // returns true\n*\n* @example\n* var out = isArrayIndexString( ':' );\n* // returns false\n*/\nfunction isArrayIndexString( prop ) {\n\treturn ( isString( prop ) && RE_NDINDEX.test( prop ) );\n}\n\n\n// EXPORTS //\n\nexport default isArrayIndexString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is a serialized Cartesian index.\n*\n* @private\n* @name RE_CARTESIAN_INDEX\n* @type {RegExp}\n*\n* @example\n* var bool = RE_CARTESIAN_INDEX.test( '10,10,10' );\n* // returns true\n*\n* @example\n* var bool = RE_CARTESIAN_INDEX.test( '10, 10' );\n* // returns true\n*\n* @example\n* var bool = RE_CARTESIAN_INDEX.test( '10, -10, 10' );\n* // returns true\n*\n* @example\n* var bool = RE_CARTESIAN_INDEX.test( '1' );\n* // returns false\n*\n* @example\n* var bool = RE_CARTESIAN_INDEX.test( '-1' );\n* // returns false\n*\n* @example\n* var bool = RE_CARTESIAN_INDEX.test( '0:10:2' );\n* // returns false\n*/\nvar RE_CARTESIAN_INDEX = /^\\s*(?:-?[0-9]+)\\s*(?:,\\s*(?:-?[0-9]+)\\s*)*,\\s*(?:-?[0-9]+)\\s*$/;\n\n\n// EXPORTS //\n\nexport default RE_CARTESIAN_INDEX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport RE_CARTESIAN_INDEX from './re_cartesian_index.js';\n\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is a serialized Cartesian index.\n*\n* @private\n* @param {string} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isCartesianIndexString( '1,2,3' );\n* // returns true\n*\n* @example\n* var out = isCartesianIndexString( '1' );\n* // returns false\n*\n* @example\n* var out = isCartesianIndexString( ':' );\n* // returns false\n*/\nfunction isCartesianIndexString( prop ) {\n\treturn RE_CARTESIAN_INDEX.test( prop );\n}\n\n\n// EXPORTS //\n\nexport default isCartesianIndexString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport resolveIndex from './resolve_index.js';\n\n\n// MAIN //\n\n/**\n* Resolves a list of subscripts from a serialized string of Cartesian indices.\n*\n* ## Notes\n*\n* -   In non-strict mode, if provided an out-of-bounds subscript, the function returns `undefined`.\n*\n* @private\n* @param {string} str - Cartesian indices string\n* @param {NonNegativeIntegerArray} shape - dimensions\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} index exceeds ndarray bounds\n* @throws {RangeError} number of indices must match the number of ndarray dimensions\n* @returns {(NonNegativeIntegerArray|void)} result\n*/\nfunction resolveSubscripts( str, shape, strict ) {\n\tvar ndims;\n\tvar out;\n\tvar idx;\n\tvar i;\n\n\tndims = shape.length;\n\n\t// TODO: add support for serialized CartesianIndex instances: 'CartesianIndex(i,j,k)' => str2cartesian (similar to str2slice)\n\n\tout = str.split( /\\s*,\\s*/ );\n\tif ( out.length !== ndims ) {\n\t\tthrow new RangeError( format( 'invalid operation. Number of indices does not match the number of array dimensions. Array shape: (%s). Index dimensions: %u.', shape.join( ',' ), out.length ) );\n\t}\n\t// Normalize each subscript...\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tidx = resolveIndex( out[ i ], shape[ i ], strict );\n\t\tif ( idx === -1 ) {\n\t\t\t// In non-strict mode, match normal object behavior by returning `undefined` for undefined/non-existent properties...\n\t\t\treturn;\n\t\t}\n\t\tout[ i ] = idx;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default resolveSubscripts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport replace from '@stdlib/string-base-replace';\n\n\n// MAIN //\n\n/**\n* Returns an updated error message for trapped errors.\n*\n* @private\n* @param {string} msg - error message\n* @returns {string} updated message\n*/\nfunction errMessage( msg ) {\n\treturn replace( msg, /^invalid arguments?/, 'invalid operation' );\n}\n\n\n// EXPORTS //\n\nexport default errMessage;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport hasProperty from '@stdlib/assert-has-property';\nimport isIntegerString from './is_integer_string.js';\nimport isArrayIndexString from './is_ndindex_string.js';\nimport isCartesianIndexString from './is_cartesian_index_string.js';\nimport getElement from './get_element.js';\nimport getCartesian from './get_cartesian.js';\nimport getValue from './get_value.js';\nimport getSlice from './get_slice.js';\n\n\n// MAIN //\n\n/**\n* Returns a trap for retrieving property values.\n*\n* @private\n* @param {Object} ctx - context object\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.ctor - proxied ndarray constructor\n* @param {Function} ctx.postGetArray - function to process a retrieved ndarray\n* @param {Object} ctx.cache - cache for resolving array index objects\n* @param {Function} ctx.prop2slice - function for converting an indexing expression to a slice\n* @returns {Function} handler\n*/\nfunction factory( ctx ) {\n\treturn get;\n\n\t/**\n\t* Trap for retrieving property values.\n\t*\n\t* @private\n\t* @param {Object} target - target object\n\t* @param {(string|symbol)} property - property name\n\t* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n\t* @throws {Error} invalid slice operation\n\t* @throws {RangeError} number of slice dimensions must match the number of ndarray dimensions\n\t* @returns {*} result\n\t*/\n\tfunction get( target, property, receiver ) {\n\t\tif ( isIntegerString( property ) ) {\n\t\t\treturn getElement( target, property, ctx );\n\t\t}\n\t\tif ( hasProperty( target, property ) || !isString( property ) ) {\n\t\t\treturn getValue( target, property, receiver, ctx );\n\t\t}\n\t\tif ( isCartesianIndexString( property ) ) {\n\t\t\treturn getCartesian( target, property, ctx );\n\t\t}\n\t\tif ( isArrayIndexString( property ) ) {\n\t\t\t// FIXME\n\t\t\treturn;\n\t\t}\n\t\treturn getSlice( target, property, ctx );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport scalar2ndarrayLike from '@stdlib/ndarray-base-from-scalar-like';\n\n\n// MAIN //\n\n/**\n* Returns the element associated with a specified index.\n*\n* @private\n* @param {ndarrayLike} target - target object\n* @param {string} property - index string\n* @param {Object} ctx - context object\n* @param {Function} ctx.getter - accessor for retrieving array elements\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.postGetArray - function to process a retrieved ndarray\n* @throws {RangeError} index exceeds ndarray bounds\n* @returns {(ndarrayLike|void)} result\n*/\nfunction getElement( target, property, ctx ) {\n\tvar v = ctx.getter( target, property, ctx.strict );\n\tif ( v === void 0 ) {\n\t\treturn;\n\t}\n\treturn ctx.postGetArray( scalar2ndarrayLike( target, v ) );\n}\n\n\n// EXPORTS //\n\nexport default getElement;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\n\n\n// MAIN //\n\n/**\n* Returns the property value associated with a specified property.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @param {Object} ctx - context object\n* @param {Function} ctx.ctor - proxied ndarray constructor\n* @returns {*} result\n*/\nfunction getValue( target, property, receiver, ctx ) {\n\tvar value = target[ property ];\n\tif ( isFunction( value ) ) {\n\t\tif ( value === target.constructor ) {\n\t\t\treturn ctx.ctor;\n\t\t}\n\t\treturn wrapper;\n\t}\n\treturn value;\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nexport default getValue;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport scalar2ndarrayLike from '@stdlib/ndarray-base-from-scalar-like';\nimport getShape from '@stdlib/ndarray-base-shape';\nimport resolveSubscripts from './resolve_subscripts.js';\n\n\n// MAIN //\n\n/**\n* Returns the element associated with a specified set of subscripts.\n*\n* @private\n* @param {ndarrayLike} target - target object\n* @param {string} property - index string\n* @param {Object} ctx - context object\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.postGetArray - function to process a retrieved ndarray\n* @throws {RangeError} index exceeds ndarray bounds\n* @throws {RangeError} number of indices must match the number of ndarray dimensions\n* @returns {(ndarrayLike|void)} result\n*/\nfunction getCartesian( target, property, ctx ) {\n\tvar sub;\n\tvar v;\n\n\tsub = resolveSubscripts( property, getShape( target, false ), ctx.strict );\n\tif ( sub === void 0 ) {\n\t\treturn;\n\t}\n\t// Use the `get` method, which we expect every ndarray-like object to have, in order to resolve a single element:\n\tv = target.get.apply( target, sub );\n\tif ( v === void 0 ) {\n\t\treturn;\n\t}\n\t// Return the element as a 0-D ndarray to ensure consistency with linear indexing and slicing:\n\treturn ctx.postGetArray( scalar2ndarrayLike( target, v ) );\n}\n\n\n// EXPORTS //\n\nexport default getCartesian;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport slice from '@stdlib/ndarray-base-slice';\nimport errMessage from './error_message.js';\n\n\n// MAIN //\n\n/**\n* Returns an ndarray view.\n*\n* @private\n* @param {ndarrayLike} target - target object\n* @param {string} property - property name\n* @param {Object} ctx - context object\n* @param {Function} ctx.postGetArray - function to process a retrieved ndarray\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.prop2slice - function for converting an indexing expression to a slice\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of ndarray dimensions\n* @returns {ndarrayLike} result\n*/\nfunction getSlice( target, property, ctx ) {\n\tvar s = ctx.prop2slice( target, property, ctx.strict );\n\tif ( s === null ) {\n\t\t// Ensure consistency with normal object behavior by returning `undefined` for any \"unrecognized\" property name:\n\t\treturn;\n\t}\n\ttry {\n\t\treturn ctx.postGetArray( slice( target, s, ctx.strict, false ) );\n\t} catch ( err ) {\n\t\t// In principle, we should only error when in \"strict\" mode and a slice exceeds ndarray bounds...\n\t\tthrow new err.constructor( errMessage( err.message ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default getSlice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets the value associated with a specified property.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property\n* @param {*} value - new value\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction setValue( target, property, value ) {\n\ttarget[ property ] = value;\n\treturn true;\n}\n\n\n// EXPORTS //\n\nexport default setValue;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sliceAssign from '@stdlib/ndarray-base-slice-assign';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isComplexDataType from '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type';\nimport isFloatingDataType from '@stdlib/ndarray-base-assert-is-floating-point-data-type';\nimport isUnsignedIntegerDataType from '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type';\nimport isSignedIntegerDataType from '@stdlib/ndarray-base-assert-is-signed-integer-data-type';\nimport isSafeCast from '@stdlib/ndarray-base-assert-is-safe-data-type-cast';\nimport INT8_MAX from '@stdlib/constants-int8-max';\nimport INT16_MAX from '@stdlib/constants-int16-max';\nimport INT32_MAX from '@stdlib/constants-int32-max';\nimport minDataType from '@stdlib/ndarray-min-dtype';\nimport complexDataType from '@stdlib/complex-dtype';\nimport scalar2ndarray from '@stdlib/ndarray-from-scalar';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport errMessage from './error_message.js';\n\n\n// FUNCTIONS //\n\n/**\n* Returns an options object for creating an ndarray from a scalar value.\n*\n* @private\n* @param {string} dtype - output array data type\n* @returns {Object} options\n*/\nfunction options( dtype ) {\n\treturn {\n\t\t'dtype': dtype\n\t};\n}\n\n\n// MAIN //\n\n/**\n* Sets element values belonging to the ndarray view specified by an indexing expression.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - indexing expression\n* @param {*} value - new value\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @param {Object} ctx - context object\n* @param {string} ctx.dtype - ndarray data type\n* @param {Function} ctx.prop2slice - function for converting an indexing expression to a slice\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {Error} assigned value must be broadcast compatible with target array view\n* @throws {TypeError} assigned value cannot be safely cast to the target array data type\n* @throws {TypeError} target array must have a supported data type\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction setSlice( target, property, value, receiver, ctx ) {\n\tvar vdt;\n\tvar dt;\n\tvar s;\n\n\ts = ctx.prop2slice( target, property, ctx.strict );\n\tif ( s === null ) {\n\t\t// If unable to parse the property as an indexing expression, signal that we were unable to perform slice assignment:\n\t\treturn false;\n\t}\n\tif ( !isndarrayLike( value ) ) {\n\t\tdt = ctx.dtype;\n\n\t\t// If the target array data type is \"generic\", we can just go ahead and \"cast\" to the target array data type...\n\t\tif ( dt === 'generic' ) {\n\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t}\n\t\t// If the input value is a real-valued number, we need to inspect the value to determine whether we can safely cast the value to the target array data type...\n\t\telse if ( isNumber( value ) ) {\n\t\t\t// If the target array has a floating-point data type, we can just go ahead and cast the input scalar to the target array data type, as number literals are, by default, double-precision floating-point values and casting to lower-precision floating-point is allowed...\n\t\t\tif ( isFloatingDataType( dt ) ) {\n\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t}\n\t\t\t// If the target array has an unsigned integer data type, then the assigned value must be a compatible nonnegative integer value...\n\t\t\telse if ( isUnsignedIntegerDataType( dt ) ) {\n\t\t\t\tvdt = minDataType( value ); // note: we rely on data type resolution to handle the case where `value` is a non-integer value. In that case, `vdt` will resolve to a floating-point data type and `isSafeCast` will evaluate to `false`\n\t\t\t\tif ( isSafeCast( vdt, dt ) ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'nullEw', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the target array has a signed integer data type, then the assigned value must be a compatible integer value...\n\t\t\telse if ( isSignedIntegerDataType( dt ) ) {\n\t\t\t\tif ( !isInteger( value ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'nullEw', minDataType( value ), dt ) );\n\t\t\t\t}\n\t\t\t\t// Manually resolve the minimum data type of the closest \"kind\" necessary for storing a scalar value, as `minDataType()` defaults to unsigned integer data types when a scalar value is greater than or equal to zero...\n\t\t\t\tif ( value < 0 ) {\n\t\t\t\t\tvdt = minDataType( value );\n\t\t\t\t} else if ( value <= INT8_MAX ) { // TODO: consider moving this logic to `@stdlib/ndarray/base/min-signed-intger-dtype` where the interface can assume that `value` is integer-valued\n\t\t\t\t\tvdt = 'int8';\n\t\t\t\t} else if ( value <= INT16_MAX ) {\n\t\t\t\t\tvdt = 'int16';\n\t\t\t\t} else if ( value <= INT32_MAX ) {\n\t\t\t\t\tvdt = 'int32';\n\t\t\t\t} else {\n\t\t\t\t\tvdt = 'float64';\n\t\t\t\t}\n\t\t\t\tif ( isSafeCast( vdt, dt ) ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'nullEw', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the target array has \"binary\" data type, then the assigned value must be a compatible nonnegative integer value...\n\t\t\telse if ( dt === 'binary' ) {\n\t\t\t\tvdt = minDataType( value );\n\t\t\t\tif ( vdt === 'uint8' ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'nullEw', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If we reach this point, we must be dealing with an unexpected target array data type...\n\t\t\telse {\n\t\t\t\t// Raise an exception in order to flag that, in order to perform assignment, we need to add explicit support for additional data types:\n\t\t\t\tthrow new TypeError( format( 'nullEx', dt ) );\n\t\t\t}\n\t\t}\n\t\t// If the target array is not \"generic\" and the input value is a complex number, then the target array data type must also have a complex number data type...\n\t\telse if ( isComplexLike( value ) ) {\n\t\t\tif ( !isComplexDataType( dt ) ) {\n\t\t\t\tthrow new TypeError( format( 'nullEw', complexDataType( value ), dt ) );\n\t\t\t}\n\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t}\n\t\t// If the target array is not \"generic\" and the input value is neither a real- or complex-valued number, raise an exception in order to flag that, in order to perform assignment, we need to add explicit support for additional data types...\n\t\telse {\n\t\t\tthrow new TypeError( format( 'nullEw', typeof value, dt ) );\n\t\t}\n\t}\n\ttry {\n\t\tsliceAssign( value, receiver, s, ctx.strict );\n\t} catch ( err ) {\n\t\tthrow new err.constructor( errMessage( err.message ) );\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nexport default setSlice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport hasProperty from '@stdlib/assert-has-property';\nimport isCartesianIndexString from './is_cartesian_index_string.js';\nimport isArrayIndexString from './is_ndindex_string.js';\nimport isIntegerString from './is_integer_string.js';\nimport setCartesian from './set_cartesian.js';\nimport setElement from './set_element.js';\nimport setValue from './set_value.js';\nimport setSlice from './set_slice.js';\n\n\n// MAIN //\n\n/**\n* Returns a trap for setting property values.\n*\n* @private\n* @param {Object} ctx - context object\n* @param {string} ctx.dtype - ndarray data type\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.validator - function for validating new values\n* @param {(Function|null)} ctx.preSetElement - function for normalizing new values (if necessary)\n* @param {Function} ctx.prop2slice - function for converting an indexing expression to a slice\n* @returns {Function} handler\n*/\nfunction factory( ctx ) {\n\treturn set;\n\n\t/**\n\t* Trap for setting property values.\n\t*\n\t* @private\n\t* @param {Object} target - target object\n\t* @param {(string|symbol)} property - property name\n\t* @param {*} value - new value\n\t* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n\t* @throws {Error} invalid slice operation\n\t* @throws {RangeError} number of slice dimensions must match the number of ndarray dimensions\n\t* @throws {Error} assigned value must be broadcast compatible with output ndarray view\n\t* @throws {TypeError} assigned value cannot be safely cast to the output ndarray data type\n\t* @returns {boolean} boolean indicating whether assignment succeeded\n\t*/\n\tfunction set( target, property, value, receiver ) {\n\t\tvar out;\n\t\tif ( hasProperty( target, property ) || !isString( property ) ) {\n\t\t\treturn setValue( target, property, value, ctx );\n\t\t}\n\t\tif ( isIntegerString( property ) ) {\n\t\t\treturn setElement( target, property, value, ctx );\n\t\t}\n\t\tif ( isCartesianIndexString( property ) ) {\n\t\t\treturn setCartesian( target, property, value, ctx );\n\t\t}\n\t\tif ( isArrayIndexString( property ) ) {\n\t\t\t// FIXME\n\t\t\treturn false;\n\t\t}\n\t\tout = setSlice( target, property, value, receiver, ctx );\n\t\tif ( out ) {\n\t\t\treturn out;\n\t\t}\n\t\t// If we were unsuccessful (e.g., due to an invalid subsequence, etc), set the \"property\" in the same way as would any normal property (e.g., if an indexing expression is an invalid subsequence, assign as would a regular property: `i = 'a:b:c'` => `x[i] = 1` => `v = x[i]` => `v === 1`):\n\t\treturn setValue( target, property, value, ctx );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets the element associated with a specified index.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - index string\n* @param {*} value - new value\n* @param {Object} ctx - context object\n* @param {Function} ctx.setter - accessor for setting ndarray elements\n* @param {string} ctx.dtype - target ndarray data type\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.validator - function for validating new values\n* @param {(Function|null)} ctx.preSetElement - function for normalizing new values (if necessary)\n* @throws {TypeError} assigned value cannot be safely cast to the target ndarray data type\n* @throws {TypeError} target ndarray must have a supported data type\n* @throws {RangeError} index exceeds ndarray bounds\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction setElement( target, property, value, ctx ) {\n\tvar err;\n\tvar v;\n\n\terr = ctx.validator( value, ctx.dtype );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( ctx.preSetElement ) {\n\t\tv = ctx.preSetElement( value );\n\t} else {\n\t\tv = value;\n\t}\n\treturn ctx.setter( target, property, v, ctx.strict );\n}\n\n\n// EXPORTS //\n\nexport default setElement;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getShape from '@stdlib/ndarray-base-shape';\nimport resolveSubscripts from './resolve_subscripts.js';\n\n\n// MAIN //\n\n/**\n* Sets the element associated with a specified set of subscripts.\n*\n* @private\n* @param {ndarrayLike} target - target object\n* @param {string} property - index string\n* @param {*} value - new value\n* @param {Object} ctx - context object\n* @param {string} ctx.dtype - target ndarray data type\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.validator - function for validating new values\n* @param {(Function|null)} ctx.preSetElement - function for normalizing new values (if necessary)\n* @throws {TypeError} assigned value cannot be safely cast to the target ndarray data type\n* @throws {TypeError} target ndarray must have a supported data type\n* @throws {RangeError} index exceeds ndarray bounds\n* @throws {RangeError} number of indices must match the number of ndarray dimensions\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction setCartesian( target, property, value, ctx ) {\n\tvar args;\n\tvar err;\n\tvar v;\n\n\terr = ctx.validator( value, ctx.dtype );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( ctx.preSetElement ) {\n\t\tv = ctx.preSetElement( value );\n\t} else {\n\t\tv = value;\n\t}\n\targs = resolveSubscripts( property, getShape( target, false ), ctx.strict );\n\tif ( args === void 0 ) {\n\t\treturn false;\n\t}\n\targs.push( v );\n\n\t// Use the `set` method, which we expect every ndarray-like object to have, in order to set a single element:\n\ttarget.set.apply( target, args );\n\n\treturn true;\n}\n\n\n// EXPORTS //\n\nexport default setCartesian;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport Proxy from '@stdlib/proxy-ctor';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport ndarraylike2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport assign from '@stdlib/object-assign';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport hasProxySupport from './has_proxy_support.js';\nimport setElementWrapper from './set_element_wrapper.js';\nimport getArrayWrapper from './get_ndarray_wrapper.js';\nimport defaults from './defaults.js';\nimport validate from './validate.js';\nimport validator from './validator.js';\nimport prop2slice from './prop2slice.js';\nimport ctor from './ctor.js';\nimport getter from './getter.js';\nimport setter from './setter.js';\nimport get from './get.js';\nimport set from './set.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for converting an ndarray to an object supporting fancy indexing.\n*\n* @param {Options} options - function options\n* @param {boolean} [options.strict=false] - boolean indicating whether to enforce strict bounds checking by default\n* @param {Function} [options.cache] - default cache for resolving ndarray index objects\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} function for converting an ndarray to an object supporting fancy indexing\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = new ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var ndarray2fancy = factory();\n*\n* var y = ndarray2fancy( x );\n* // returns <ndarray>\n*\n* var v = y[ '1:,:' ];\n* // returns <ndarray>\n*/\nfunction factory() {\n\tvar OPTIONS;\n\tvar err;\n\n\tOPTIONS = defaults();\n\tif ( arguments.length ) {\n\t\terr = validate( OPTIONS, arguments[ 0 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\treturn ndarray2fancy;\n\n\t/**\n\t* Converts an ndarray to an object supporting fancy indexing.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @param {Options} [options] - function options\n\t* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n\t* @param {Function} [options.cache] - cache for resolving array index objects\n\t* @throws {TypeError} first argument must be ndarray-like\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ndarrayLike} fancy ndarray\n\t*/\n\tfunction ndarray2fancy( x ) {\n\t\tvar opts;\n\t\tvar err;\n\t\tvar arr;\n\t\tvar dt;\n\t\tvar o;\n\n\t\tif ( !isndarrayLike( x ) ) {\n\t\t\tthrow new TypeError( format( 'null4f', x ) );\n\t\t}\n\t\tif ( hasProxySupport ) {\n\t\t\topts = assign( {}, OPTIONS );\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\terr = validate( opts, arguments[ 1 ] );\n\t\t\t\tif ( err ) {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr = ndarraylike2object( x );\n\t\t\tdt = arr.dtype || '';\n\t\t\to = {\n\t\t\t\t'ref': x,\n\t\t\t\t'dtype': dt,\n\t\t\t\t'getter': getter( x ),\n\t\t\t\t'setter': setter( x ),\n\t\t\t\t'preSetElement': setElementWrapper( dt ),\n\t\t\t\t'postGetArray': getArrayWrapper( ndarray2fancy, opts ),\n\t\t\t\t'cache': opts.cache,\n\t\t\t\t'strict': opts.strict,\n\t\t\t\t'validator': validator( dt ),\n\t\t\t\t'ndarray2fancy': ndarray2fancy,\n\t\t\t\t'ctor': new Proxy( x.constructor || ndarray, {\n\t\t\t\t\t'construct': ctor( ndarray2fancy, opts )\n\t\t\t\t}),\n\t\t\t\t'prop2slice': prop2slice( arr.shape.length ) // WARNING: we assume a fixed number of dimensions!\n\t\t\t};\n\t\t\treturn new Proxy( x, {\n\t\t\t\t'get': get( o ),\n\t\t\t\t'set': set( o )\n\t\t\t});\n\t\t}\n\t\t// TODO: replace with `@stdlib/console/warn` (or equivalent once available)\n\t\tconsole.warn( 'WARNING: Proxy objects are not supported in the current environment. Some fancy functionality may not be available.' ); // eslint-disable-line no-console\n\t\treturn x;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ndindex from '@stdlib/ndarray-index';\n\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*\n* @example\n* var o = defaults();\n* // returns {...}\n*/\nfunction defaults() {\n\treturn {\n\t\t'cache': ndindex,\n\t\t'strict': false\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport prop2slice0d from './prop2slice.0d.js';\nimport prop2slice1d from './prop2slice.1d.js';\nimport prop2slicend from './prop2slice.nd.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for converting a property string to a slice according to a specified dimensionality.\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @returns {Function} function for converting a property string to a slice\n*/\nfunction prop2slice( ndims ) {\n\tif ( ndims === 0 ) {\n\t\treturn prop2slice0d;\n\t}\n\tif ( ndims === 1 ) {\n\t\treturn prop2slice1d;\n\t}\n\treturn prop2slicend;\n}\n\n\n// EXPORTS //\n\nexport default prop2slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js';\n\n\n// MAIN //\n\n/**\n* Converts an ndarray to an object supporting fancy indexing.\n*\n* @name ndarray2fancy\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {Options} [options] - function options\n* @param {boolean} [options.strict=false] - boolean indicating whether to enforce strict bounds checking\n* @param {Function} [options.cache] - cache for resolving ndarray index objects\n* @throws {TypeError} first argument must be ndarray-like\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndarrayLike} fancy ndarray\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = new ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var y = ndarray2fancy( x );\n* // returns <ndarray>\n*\n* var v = y[ '1:,:' ];\n* // returns <ndarray>\n*/\nvar ndarray2fancy = factory();\n\n\n// EXPORTS //\n\nexport default ndarray2fancy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an ndarray to an object supporting fancy indexing.\n*\n* @module @stdlib/ndarray-to-fancy\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2fancy from '@stdlib/ndarray-to-fancy';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = new ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var y = ndarray2fancy( x );\n* // returns <ndarray>\n*\n* var v = y[ '1:,:' ];\n* // returns <ndarray>\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport ndindex from '@stdlib/ndarray-index';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\nsetReadOnly( main, 'idx', ndindex );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["hasSupport","Proxy","wrapComplex","value","isNumber","wrapper","ndarray2fancy","opts","x","validate","options","isObject","hasOwnProp","strict","isBoolean","TypeError","format","cache","isMethodIn","validateGeneric","validateBoolean","dtype","validateRealFloating","isComplexLike","complexDataType","validateComplexFloating","validateSignedInteger","vdt","isInteger","minSignedIntegerDataType","isSafeCast","minDataType","validateUnsignedInteger","validator","isRealFloatingDataType","isUnsignedIntegerDataType","isSignedIntegerDataType","isBooleanDataType","isMultiSliceString","prop","startsWith","length","isSliceString","RE_INTEGER","isIntegerString","isString","test","RE_SUBSEQ","isSubsequenceString","isEllipsisString","isEmptyString","parseMultiSlice","raw","str","s","str2multislice","Error","parseSlice","str2slice","MultiSlice","parseInteger","parseInt","prop2slice","target","property","trim","isEllipsis","isSlice","isMultiSlice","isSubsequence","shape","seq2multislice","code","RangeError","join","replace","split","parseSubsequence","getShape","sargs2multislice","factory","args","a","apply","resolveIndex","max","idx","i","normalizeIndex","iget","numel","get","sub","sh","ind2sub","getStrides","getOrder","getter","iset","set","push","setter","RE_NDINDEX","isArrayIndexString","RE_CARTESIAN_INDEX","isCartesianIndexString","resolveSubscripts","ndims","out","errMessage","msg","ctx","receiver","v","postGetArray","scalar2ndarrayLike","getElement","hasProperty","isFunction","constructor","ctor","arguments","this","getValue","getCartesian","slice","err","message","getSlice","setValue","preSetElement","setElement","setCartesian","dt","isndarrayLike","scalar2ndarray","isFloatingDataType","INT8_MAX","INT16_MAX","INT32_MAX","isComplexDataType","sliceAssign","setSlice","OPTIONS","ndindex","arr","o","hasProxySupport","assign","ref","ndarraylike2object","getArrayWrapper","ndarray","construct","prop2slice0d","prop2slice1d","prop2slicend","console","warn","setReadOnly","main"],"mappings":"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"}