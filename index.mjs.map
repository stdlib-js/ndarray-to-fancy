{"version":3,"file":"index.mjs","sources":["../lib/has_proxy_support.js","../lib/set_element_wrapper.js","../lib/get_ndarray_wrapper.js","../lib/validate.js","../lib/validator.js","../lib/re_integer.js","../lib/re_subseq.js","../lib/prop2slice.0d.js","../lib/prop2slice.1d.js","../lib/prop2slice.nd.js","../lib/ctor.js","../lib/has_property.js","../lib/error_message.js","../lib/get.js","../lib/get_value.js","../lib/get_slice.js","../lib/set_slice.js","../lib/set.js","../lib/set_value.js","../lib/factory.js","../lib/defaults.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Proxy from '@stdlib/proxy-ctor';\n\n\n// MAIN //\n\n/**\n* Boolean indicating if an environment has Proxy support.\n*\n* @private\n* @name hasSupport\n* @type {boolean}\n*/\nvar hasSupport = ( typeof Proxy === 'function' ); // NOTE: cannot use `@stdlib/assert/has-proxy-support` here, as that API uses code evaluation and might violate CSPs; consequently, this is a relatively weak check for proxy support\n\n\n// EXPORTS //\n\nexport default hasSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplexDataType from '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\n\n\n// FUNCTIONS //\n\n/**\n* Normalizes values assigned to complex number ndarrays.\n*\n* @private\n* @param {*} value - input value\n* @returns {(ComplexLike|*)} output value\n*/\nfunction wrapComplex( value ) {\n\t// Wrap real-valued scalars as valid input arguments to complex number ndarrays...\n\tif ( isNumber( value ) ) {\n\t\treturn [ value, 0.0 ]; // note: we're assuming that a complex number ndarray setter accepts an array of interleaved real and imaginary components\n\t}\n\t// For everything other than a real-valued scalar, we delegate validation to the target complex number ndarray:\n\treturn value;\n}\n\n\n// MAIN //\n\n/**\n* Returns a wrapper function for processing scalar input values before assignment.\n*\n* @private\n* @param {string} dtype - ndarray data type\n* @returns {(Function|null)} wrapper function or null\n*/\nfunction wrapper( dtype ) {\n\tif ( isComplexDataType( dtype ) ) {\n\t\treturn wrapComplex;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default wrapper;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a wrapper function for processing ndarrays after retrieval.\n*\n* @private\n* @param {Function} ndarray2fancy - function for creating a proxied ndarray\n* @param {Object} opts - options\n* @param {boolean} opts.strict - boolean indicating whether to perform strict bounds checking\n* @param {Function} opts.cache - cache for resolving ndarray index objects\n* @returns {Function} wrapper function\n*/\nfunction wrapper( ndarray2fancy, opts ) {\n\treturn wrap;\n\n\t/**\n\t* Returns a proxied ndarray.\n\t*\n\t* @private\n\t* @param {ndarray} x - input ndarray\n\t* @returns {ndarray} proxied ndarray\n\t*/\n\tfunction wrap( x ) {\n\t\treturn ndarray2fancy( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrapper;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isMethodIn from '@stdlib/assert-is-method-in';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @param {Function} [options.cache] - cache for resolving array index objects\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'strict': false\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'null2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\topts.strict = options.strict;\n\t\tif ( !isBoolean( opts.strict ) ) {\n\t\t\treturn new TypeError( format( 'null2o', 'strict', opts.strict ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'cache' ) ) {\n\t\topts.cache = options.cache;\n\t\tif ( !isMethodIn( opts.cache, 'get' ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option is missing a `%s` method. Option: `%s`.', 'cache', 'get', opts.cache ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isRealFloatingDataType from '@stdlib/ndarray-base-assert-is-real-floating-point-data-type';\nimport isUnsignedIntegerDataType from '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type';\nimport isSignedIntegerDataType from '@stdlib/ndarray-base-assert-is-signed-integer-data-type';\nimport isBooleanDataType from '@stdlib/ndarray-base-assert-is-boolean-data-type';\nimport isSafeCast from '@stdlib/ndarray-base-assert-is-safe-data-type-cast';\nimport minDataType from '@stdlib/ndarray-min-dtype';\nimport minSignedIntegerDataType from '@stdlib/ndarray-base-min-signed-integer-dtype';\nimport complexDataType from '@stdlib/complex-dtype';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a \"generic\" or unknown data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {null} null\n*\n* @example\n* var err = validateGeneric( 3, 'generic' );\n* // returns null\n*/\nfunction validateGeneric() {\n\treturn null;\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a boolean data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = validateBoolean( true, 'bool' );\n* // returns null\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var err = validateBoolean( new Complex128( 5.0, 6.0 ), 'bool' );\n* // returns <TypeError>\n*/\nfunction validateBoolean( value, dtype ) {\n\tif ( isBoolean( value ) ) {\n\t\treturn null;\n\t}\n\treturn new TypeError( format( 'nullEw', typeof value, dtype ) );\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a real-valued floating-point data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = validateRealFloating( 3.14, 'float64' );\n* // returns null\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var err = validateRealFloating( new Complex128( 5.0, 6.0 ), 'float64' );\n* // returns <TypeError>\n*/\nfunction validateRealFloating( value, dtype ) {\n\tif ( isNumber( value ) ) {\n\t\treturn null;\n\t}\n\tif ( isComplexLike( value ) ) {\n\t\treturn new TypeError( format( 'nullEw', complexDataType( value ), dtype ) );\n\t}\n\treturn new TypeError( format( 'nullEw', typeof value, dtype ) );\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a complex-valued floating-point data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var err = validateComplexFloating( new Complex128( 5.0, 6.0 ), 'complex128' );\n* // returns null\n*\n* @example\n* var err = validateComplexFloating( {}, 'complex128' );\n* // returns <TypeError>\n*/\nfunction validateComplexFloating( value, dtype ) {\n\tif ( isNumber( value ) || isComplexLike( value ) ) {\n\t\treturn null;\n\t}\n\treturn new TypeError( format( 'nullEw', typeof value, dtype ) );\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a signed integer data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = validateSignedInteger( 3, 'int32' );\n* // returns null\n*\n* @example\n* var err = validateSignedInteger( 3.14, 'int32' );\n* // returns <TypeError>\n*/\nfunction validateSignedInteger( value, dtype ) {\n\tvar vdt;\n\tif ( isNumber( value ) ) {\n\t\tif ( !isInteger( value ) ) {\n\t\t\treturn new TypeError( format( 'nullEw', minDataType( value ), dtype ) );\n\t\t}\n\t\tvdt = minSignedIntegerDataType( value );\n\t\tif ( isSafeCast( vdt, dtype ) ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new TypeError( format( 'nullEw', vdt, dtype ) );\n\t}\n\tif ( isComplexLike( value ) ) {\n\t\treturn new TypeError( format( 'nullEw', complexDataType( value ), dtype ) );\n\t}\n\treturn new TypeError( format( 'nullEw', typeof value, dtype ) );\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having an unsigned integer data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = validateUnsignedInteger( 3, 'uint32' );\n* // returns null\n*\n* @example\n* var err = validateUnsignedInteger( -3, 'uint32' );\n* // returns <TypeError>\n*/\nfunction validateUnsignedInteger( value, dtype ) {\n\tvar vdt;\n\tif ( isNumber( value ) ) {\n\t\tvdt = minDataType( value ); // note: we rely on data type resolution to handle the case where `value` is a non-integer value. In that case, `vdt` will resolve to a floating-point data type and `isSafeCast` will evaluate to `false`\n\t\tif ( isSafeCast( vdt, dtype ) ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new TypeError( format( 'nullEw', vdt, dtype ) );\n\t}\n\tif ( isComplexLike( value ) ) {\n\t\treturn new TypeError( format( 'nullEw', complexDataType( value ), dtype ) );\n\t}\n\treturn new TypeError( format( 'nullEw', typeof value, dtype ) );\n}\n\n\n// MAIN //\n\n/**\n* Returns a validation function for verifying whether a provided value can be safely assigned to an element in an array having a specified data type.\n*\n* @private\n* @param {string} dtype - array data type\n* @returns {Function} validation function\n*\n* @example\n* var fcn = validator( 'int32' );\n*\n* var err = fcn( 3, 'int32' );\n* // returns null\n*\n* err = fcn( 3.14, 'int32' );\n* // returns <TypeError>\n*/\nfunction validator( dtype ) {\n\tif ( dtype === 'generic' || dtype === '' ) {\n\t\treturn validateGeneric;\n\t}\n\tif ( isRealFloatingDataType( dtype ) ) {\n\t\treturn validateRealFloating;\n\t}\n\tif ( isUnsignedIntegerDataType( dtype ) ) {\n\t\treturn validateUnsignedInteger;\n\t}\n\tif ( isSignedIntegerDataType( dtype ) ) {\n\t\treturn validateSignedInteger;\n\t}\n\tif ( isBooleanDataType( dtype ) ) {\n\t\treturn validateBoolean;\n\t}\n\t// Case: isComplexDataType( dtype ) === true\n\treturn validateComplexFloating;\n}\n\n\n// EXPORTS //\n\nexport default validator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is an integer string.\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*\n* @example\n* var bool = RE_INTEGER.test( '10' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '-1' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '0:10:2' );\n* // returns false\n*/\nvar RE_INTEGER = /^-?[0-9]+$/;\n\n\n// EXPORTS //\n\nexport default RE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is a subsequence string.\n*\n* @private\n* @name RE_SUBSEQ\n* @type {RegExp}\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0:10:2' );\n* // returns true\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0' );\n* // returns false\n*\n* @example\n* var bool = RE_SUBSEQ.test( 'Slice(0,10,2)' );\n* // returns false\n*/\nvar RE_SUBSEQ = /:/;\n\n\n// EXPORTS //\n\nexport default RE_SUBSEQ;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport trim from '@stdlib/string-base-trim';\nimport replace from '@stdlib/string-base-replace';\nimport MultiSlice from '@stdlib/slice-multi';\nimport str2multislice from '@stdlib/slice-base-str2multislice';\nimport seq2multislice from '@stdlib/slice-base-seq2multislice';\nimport str2slice from '@stdlib/slice-base-str2slice';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport RE_INTEGER from './re_integer.js';\nimport RE_SUBSEQ from './re_subseq.js';\n\n\n// MAIN //\n\n/**\n* Converts a zero-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property ) {\n\tvar shape;\n\tvar prop;\n\tvar ch;\n\tvar s;\n\n\tprop = trim( property );\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: slice\n\tif ( ch === 'S' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2slice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'nullEn', property ) );\n\t\t}\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: multi-slice\n\telse if ( ch === 'M' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'nullEn', property ) );\n\t\t}\n\t}\n\t// Case: integer\n\telse if ( RE_INTEGER.test( prop ) ) {\n\t\t// Convert the string to a numeric value:\n\t\ts = parseInt( prop, 10 );\n\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: subsequence string (e.g., ':10,1,::-1,:,-5,2::3')\n\telse if ( RE_SUBSEQ.test( prop ) ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'nullEq', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'nullEr', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'nullEn', property ) );\n\t\t\t}\n\t\t\t// s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS'\n\t\t\tthrow new RangeError( format( 'nullEv', shape.join( ',' ), replace( prop, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t\t}\n\t}\n\t// Case: empty string or ellipsis\n\telse if ( prop.length === 0 || prop === '...' ) {\n\t\ts = new MultiSlice();\n\t}\n\t// Case: non-empty string\n\telse { // FIXME: need to gracefully handle non-existent properties\n\t\tthrow new Error( format( 'nullEn', property ) );\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default prop2slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport trim from '@stdlib/string-base-trim';\nimport replace from '@stdlib/string-base-replace';\nimport MultiSlice from '@stdlib/slice-multi';\nimport str2multislice from '@stdlib/slice-base-str2multislice';\nimport seq2multislice from '@stdlib/slice-base-seq2multislice';\nimport str2slice from '@stdlib/slice-base-str2slice';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport RE_INTEGER from './re_integer.js';\n\n\n// MAIN //\n\n/**\n* Converts a one-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property, strict ) {\n\tvar shape;\n\tvar prop;\n\tvar ch;\n\tvar s;\n\n\tprop = trim( property );\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: slice\n\tif ( ch === 'S' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2slice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'nullEn', property ) );\n\t\t}\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: multi-slice\n\telse if ( ch === 'M' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'nullEn', property ) );\n\t\t}\n\t}\n\t// Case: integer\n\telse if ( RE_INTEGER.test( prop ) ) {\n\t\t// Convert the string to a numeric value:\n\t\ts = parseInt( prop, 10 );\n\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: subsequence string\n\telse if ( prop.length > 0 ) { // FIXME: need to gracefully handle non-existent properties\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'nullEq', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'nullEr', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'nullEn', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS' ) {\n\t\t\t\tthrow new RangeError( format( 'nullEv', target.shape.join( ',' ), replace( prop, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t\t\t}\n\t\t\t// NOTE: the following error check must come last due to fall-through when in non-strict mode...\n\t\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\tthrow new RangeError( format( 'nullEp', shape.join( ',' ) ) );\n\t\t\t\t}\n\t\t\t\t// Repeat parsing, this time allowing for out-of-bounds slices:\n\t\t\t\ts = seq2multislice( prop, shape, false );\n\t\t\t}\n\t\t}\n\t}\n\t// Case: empty string\n\telse {\n\t\tthrow new RangeError( format( 'nullEv', target.shape.join( ',' ), 0 ) );\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default prop2slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport trim from '@stdlib/string-base-trim';\nimport str2multislice from '@stdlib/slice-base-str2multislice';\nimport seq2multislice from '@stdlib/slice-base-seq2multislice';\nimport sargs2multislice from '@stdlib/slice-base-sargs2multislice';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport RE_SUBSEQ from './re_subseq.js';\n\n\n// MAIN //\n\n/**\n* Converts an n-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property, strict ) {\n\tvar shape;\n\tvar prop;\n\tvar ch;\n\tvar s;\n\n\tprop = trim( property );\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: multi-slice (e.g., 'MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))')\n\tif ( ch === 'M' ) {\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'nullEn', property ) );\n\t\t}\n\t}\n\t// Case: subsequence string (e.g., '...' or ':10,1,::-1,:,-5,2::3')\n\telse if ( RE_SUBSEQ.test( prop ) || prop === '...' ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'nullEq', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'nullEr', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'nullEn', property ) );\n\t\t\t}\n\t\t\t// NOTE: the following error check must come last due to fall-through when in non-strict mode...\n\t\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\tthrow new RangeError( format( 'nullEp', shape.join( ',' ) ) );\n\t\t\t\t}\n\t\t\t\t// Repeat parsing, this time allowing for out-of-bounds slices:\n\t\t\t\ts = seq2multislice( prop, shape, false );\n\t\t\t}\n\t\t}\n\t}\n\t// Case: array syntax (e.g., [ Slice(0,10,1), null, Slice(4,null,-1) ]) or Slice or integer or arbitrary string (where the latter three are not valid for >2d arrays)\n\telse {\n\t\ts = sargs2multislice( prop );\n\t\tif ( s === null ) { // FIXME: need to gracefully handle non-existent properties\n\t\t\tthrow new Error( format( 'nullEn', property ) );\n\t\t}\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default prop2slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a trap for constructing new ndarray instances.\n*\n* @private\n* @param {Function} ndarray2fancy - function for creating a proxied ndarray\n* @param {Object} opts - options\n* @param {boolean} opts.strict - boolean indicating whether to perform strict bounds checking\n* @returns {Function} handler\n*/\nfunction factory( ndarray2fancy, opts ) {\n\treturn constructor;\n\n\t/**\n\t* Trap for constructing new ndarray instances.\n\t*\n\t* @private\n\t* @param {Object} target - target object\n\t* @param {Array} args - list of constructor arguments\n\t* @param {Object} newTarget - constructor that was originally called\n\t* @returns {*} new instance\n\t*/\n\tfunction constructor( target, args ) {\n\t\tvar x;\n\t\tvar a;\n\n\t\ta = args;\n\t\tswitch ( a.length ) {\n\t\tcase 0:\n\t\t\tx = new target();\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tx = new target( a[0] );\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tx = new target( a[0], a[1] );\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tx = new target( a[0], a[1], a[2] );\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tx = new target( a[0], a[1], a[2], a[3] );\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4] );\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5] );\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5], a[6] );\n\t\t\tbreak;\n\t\tcase 8:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7] );\n\t\t\tbreak;\n\t\tcase 9:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8] ); // eslint-disable-line max-len\n\t\t\tbreak;\n\t\tcase 10:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9] ); // eslint-disable-line max-len\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// Fallback to using `apply`; however, some constructors may error if the constructor is not callable (i.e., if a constructor always requires `new`):\n\t\t\tx = target.apply( null, a );\n\t\t}\n\t\treturn ndarray2fancy( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport propertiesIn from '@stdlib/utils-properties-in';\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport defaults from '@stdlib/ndarray-defaults';\n\n\n// MAIN //\n\n/**\n* Tests whether a property name exists on the parent prototype.\n*\n* @private\n* @name hasProperty\n* @type {Function}\n* @param {(string|symbol)} name - property name\n* @returns {boolean} boolean indicating whether the property exists on the parent prototype\n*\n* @example\n* var bool = hasProperty( 'get' );\n* // returns true\n*\n* bool = hasProperty( 'foo' );\n* // returns false\n*/\nvar hasProperty = contains( propertiesIn( new ndarray( 'generic', [ 0 ], [], [ 0 ], 0, defaults.get( 'order' ) ) ) );\n\n\n// EXPORTS //\n\nexport default hasProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport replace from '@stdlib/string-base-replace';\n\n\n// MAIN //\n\n/**\n* Returns an updated error message for trapped errors.\n*\n* @private\n* @param {string} msg - error message\n* @returns {string} updated message\n*/\nfunction errMessage( msg ) {\n\treturn replace( msg, /^invalid argument/, 'invalid operation' );\n}\n\n\n// EXPORTS //\n\nexport default errMessage;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasProperty from './has_property.js';\nimport getValue from './get_value.js';\nimport getSlice from './get_slice.js';\n\n\n// MAIN //\n\n/**\n* Returns a trap for retrieving property values.\n*\n* @private\n* @param {Object} ctx - context object\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.ctor - proxied ndarray constructor\n* @param {Function} ctx.postGetArray - function to process a retrieved ndarray\n* @param {Object} ctx.cache - cache for resolving array index objects\n* @param {Function} ctx.prop2slice - function for converting an indexing expression to a slice\n* @returns {Function} handler\n*/\nfunction factory( ctx ) {\n\treturn get;\n\n\t/**\n\t* Trap for retrieving property values.\n\t*\n\t* @private\n\t* @param {Object} target - target object\n\t* @param {(string|symbol)} property - property name\n\t* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n\t* @throws {Error} invalid slice operation\n\t* @throws {RangeError} number of slice dimensions must match the number of ndarray dimensions\n\t* @returns {*} result\n\t*/\n\tfunction get( target, property, receiver ) {\n\t\tif ( hasProperty( property ) ) {\n\t\t\treturn getValue( target, property, receiver );\n\t\t}\n\t\treturn getSlice( target, property, receiver, ctx.prop2slice );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\n\n\n// MAIN //\n\n/**\n* Returns the property value associated with a specified property.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @returns {*} result\n*/\nfunction getValue( target, property, receiver ) {\n\tvar value = target[ property ];\n\tif ( isFunction( value ) ) {\n\t\t// FIXME: handle constructor (see array/to-fancy)\n\t\treturn wrapper;\n\t}\n\treturn value;\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nexport default getValue;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport slice from '@stdlib/ndarray-base-slice';\nimport errMessage from './error_message.js';\n\n\n// MAIN //\n\n/**\n* Returns an ndarray view.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @param {Function} prop2slice - function for converting an indexing expression to a slice\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {FancyArray} result\n*/\nfunction getSlice( target, property, receiver, prop2slice ) {\n\tvar strict;\n\tvar s;\n\n\tstrict = false; // TODO: support strict mode\n\ts = prop2slice( target, property, strict );\n\ttry {\n\t\treturn slice( receiver, s, strict, false );\n\t} catch ( err ) {\n\t\tthrow new err.constructor( errMessage( err.message ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default getSlice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sliceAssign from '@stdlib/ndarray-base-slice-assign';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isComplexDataType from '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type';\nimport isFloatingDataType from '@stdlib/ndarray-base-assert-is-floating-point-data-type';\nimport isUnsignedIntegerDataType from '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type';\nimport isSignedIntegerDataType from '@stdlib/ndarray-base-assert-is-signed-integer-data-type';\nimport isSafeCast from '@stdlib/ndarray-base-assert-is-safe-data-type-cast';\nimport INT8_MAX from '@stdlib/constants-int8-max';\nimport INT16_MAX from '@stdlib/constants-int16-max';\nimport INT32_MAX from '@stdlib/constants-int32-max';\nimport minDataType from '@stdlib/ndarray-min-dtype';\nimport complexDataType from '@stdlib/complex-dtype';\nimport scalar2ndarray from '@stdlib/ndarray-from-scalar';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport errMessage from './error_message.js';\n\n\n// FUNCTIONS //\n\n/**\n* Returns an options object for creating an ndarray from a scalar value.\n*\n* @private\n* @param {string} dtype - output array data type\n* @returns {Object} options\n*/\nfunction options( dtype ) {\n\treturn {\n\t\t'dtype': dtype\n\t};\n}\n\n\n// MAIN //\n\n/**\n* Sets element values belonging to the ndarray view specified by an indexing expression.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - indexing expression\n* @param {*} value - new value\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @param {Function} prop2slice - function for converting an indexing expression to a slice\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {Error} assigned value must be broadcast compatible with target array view\n* @throws {TypeError} assigned value cannot be safely cast to the target array data type\n* @throws {TypeError} target array must have a supported data type\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction setSlice( target, property, value, receiver, prop2slice ) {\n\tvar strict;\n\tvar vdt;\n\tvar dt;\n\tvar s;\n\n\tif ( !isndarrayLike( value ) ) {\n\t\tdt = target.dtype;\n\n\t\t// If the target array data type is \"generic\", we can just go ahead and \"cast\" to the target array data type...\n\t\tif ( dt === 'generic' ) {\n\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t}\n\t\t// If the input value is a real-valued number, we need to inspect the value to determine whether we can safely cast the value to the target array data type...\n\t\telse if ( isNumber( value ) ) {\n\t\t\t// If the target array has a floating-point data type, we can just go ahead and cast the input scalar to the target array data type, as number literals are, by default, double-precision floating-point values and casting to lower-precision floating-point is allowed...\n\t\t\tif ( isFloatingDataType( dt ) ) {\n\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t}\n\t\t\t// If the target array has an unsigned integer data type, then the assigned value must be a compatible nonnegative integer value...\n\t\t\telse if ( isUnsignedIntegerDataType( dt ) ) {\n\t\t\t\tvdt = minDataType( value ); // note: we rely on data type resolution to handle the case where `value` is a non-integer value. In that case, `vdt` will resolve to a floating-point data type and `isSafeCast` will evaluate to `false`\n\t\t\t\tif ( isSafeCast( vdt, dt ) ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'nullEw', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the target array has a signed integer data type, then the assigned value must be a compatible integer value...\n\t\t\telse if ( isSignedIntegerDataType( dt ) ) {\n\t\t\t\tif ( !isInteger( value ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'nullEw', minDataType( value ), dt ) );\n\t\t\t\t}\n\t\t\t\t// Manually resolve the minimum data type of the closest \"kind\" necessary for storing a scalar value, as `minDataType()` defaults to unsigned integer data types when a scalar value is greater than or equal to zero...\n\t\t\t\tif ( value < 0 ) {\n\t\t\t\t\tvdt = minDataType( value );\n\t\t\t\t} else if ( value <= INT8_MAX ) { // TODO: consider moving this logic to `@stdlib/ndarray/base/min-signed-intger-dtype` where the interface can assume that `value` is integer-valued\n\t\t\t\t\tvdt = 'int8';\n\t\t\t\t} else if ( value <= INT16_MAX ) {\n\t\t\t\t\tvdt = 'int16';\n\t\t\t\t} else if ( value <= INT32_MAX ) {\n\t\t\t\t\tvdt = 'int32';\n\t\t\t\t} else {\n\t\t\t\t\tvdt = 'float64';\n\t\t\t\t}\n\t\t\t\tif ( isSafeCast( vdt, dt ) ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'nullEw', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the target array has \"binary\" data type, then the assigned value must be a compatible nonnegative integer value...\n\t\t\telse if ( dt === 'binary' ) {\n\t\t\t\tvdt = minDataType( value );\n\t\t\t\tif ( vdt === 'uint8' ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'nullEw', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If we reach this point, we must be dealing with an unexpected target array data type...\n\t\t\telse {\n\t\t\t\t// Raise an exception in order to flag that, in order to perform assignment, we need to add explicit support for additional data types:\n\t\t\t\tthrow new TypeError( format( 'nullEx', dt ) );\n\t\t\t}\n\t\t}\n\t\t// If the target array is not \"generic\" and the input value is a complex number, then the target array data type must also have a complex number data type...\n\t\telse if ( isComplexLike( value ) ) {\n\t\t\tif ( !isComplexDataType( dt ) ) {\n\t\t\t\tthrow new TypeError( format( 'nullEw', complexDataType( value ), dt ) );\n\t\t\t}\n\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t}\n\t\t// If the target array is not \"generic\" and the input value is neither a real- or complex-valued number, raise an exception in order to flag that, in order to perform assignment, we need to add explicit support for additional data types...\n\t\telse {\n\t\t\tthrow new TypeError( format( 'nullEw', typeof value, dt ) );\n\t\t}\n\t}\n\tstrict = false; // TODO: support strict mode\n\ts = prop2slice( target, property, strict );\n\ttry {\n\t\tsliceAssign( value, receiver, s, strict );\n\t\treturn true;\n\t} catch ( err ) {\n\t\tthrow new err.constructor( errMessage( err.message ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default setSlice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasProperty from './has_property.js';\nimport setValue from './set_value.js';\nimport setSlice from './set_slice.js';\n\n\n// MAIN //\n\n/**\n* Returns a trap for setting property values.\n*\n* @private\n* @param {Object} ctx - context object\n* @param {string} ctx.dtype - ndarray data type\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.validator - function for validating new values\n* @param {(Function|null)} ctx.preSetElement - function for normalizing new values (if necessary)\n* @param {Function} ctx.prop2slice - function for converting an indexing expression to a slice\n* @returns {Function} handler\n*/\nfunction factory( ctx ) {\n\treturn set;\n\n\t/**\n\t* Trap for setting property values.\n\t*\n\t* @private\n\t* @param {Object} target - target object\n\t* @param {(string|symbol)} property - property name\n\t* @param {*} value - new value\n\t* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n\t* @throws {Error} invalid slice operation\n\t* @throws {RangeError} number of slice dimensions must match the number of ndarray dimensions\n\t* @throws {Error} assigned value must be broadcast compatible with output ndarray view\n\t* @throws {TypeError} assigned value cannot be safely cast to the output ndarray data type\n\t* @returns {boolean} boolean indicating whether assignment succeeded\n\t*/\n\tfunction set( target, property, value, receiver ) {\n\t\tif ( hasProperty( property ) ) {\n\t\t\treturn setValue( target, property, value );\n\t\t}\n\t\treturn setSlice( target, property, value, receiver, ctx.prop2slice );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets the value associated with a specified property.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property\n* @param {*} value - new value\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction setValue( target, property, value ) {\n\ttarget[ property ] = value;\n\treturn true;\n}\n\n\n// EXPORTS //\n\nexport default setValue;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport Proxy from '@stdlib/proxy-ctor';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport ndarraylike2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport assign from '@stdlib/object-assign';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport hasProxySupport from './has_proxy_support.js';\nimport setElementWrapper from './set_element_wrapper.js';\nimport getArrayWrapper from './get_ndarray_wrapper.js';\nimport defaults from './defaults.js';\nimport validate from './validate.js';\nimport validator from './validator.js';\nimport prop2slice0d from './prop2slice.0d.js';\nimport prop2slice1d from './prop2slice.1d.js';\nimport prop2slicend from './prop2slice.nd.js';\nimport ctor from './ctor.js';\nimport get from './get.js';\nimport set from './set.js';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a function for converting a property string to a slice according to a specified dimensionality.\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @returns {Function} function for converting a property string to a slice\n*/\nfunction prop2slice( ndims ) {\n\tif ( ndims === 0 ) {\n\t\treturn prop2slice0d;\n\t}\n\tif ( ndims === 1 ) {\n\t\treturn prop2slice1d;\n\t}\n\treturn prop2slicend;\n}\n\n\n// MAIN //\n\n/**\n* Returns a function for converting an ndarray to an object supporting fancy indexing.\n*\n* @param {Options} options - function options\n* @param {boolean} [options.strict=false] - boolean indicating whether to enforce strict bounds checking by default\n* @param {Function} [options.cache] - default cache for resolving ndarray index objects\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} function for converting an ndarray to an object supporting fancy indexing\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = new ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var ndarray2fancy = factory();\n*\n* var y = ndarray2fancy( x );\n* // returns <ndarray>\n*\n* var v = y[ '1:,:' ];\n* // returns <ndarray>\n*/\nfunction factory() {\n\tvar OPTIONS;\n\tvar err;\n\n\tOPTIONS = defaults();\n\tif ( arguments.length ) {\n\t\terr = validate( OPTIONS, arguments[ 0 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\treturn ndarray2fancy;\n\n\t/**\n\t* Converts an ndarray to an object supporting fancy indexing.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @param {Options} [options] - function options\n\t* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n\t* @param {Function} [options.cache] - cache for resolving array index objects\n\t* @throws {TypeError} first argument must be ndarray-like\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ndarrayLike} fancy ndarray\n\t*/\n\tfunction ndarray2fancy( x ) {\n\t\tvar opts;\n\t\tvar err;\n\t\tvar arr;\n\t\tvar dt;\n\t\tvar o;\n\n\t\tif ( !isndarrayLike( x ) ) {\n\t\t\tthrow new TypeError( format( 'null4f', x ) );\n\t\t}\n\t\tif ( hasProxySupport ) {\n\t\t\topts = assign( {}, OPTIONS );\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\terr = validate( opts, arguments[ 1 ] );\n\t\t\t\tif ( err ) {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr = ndarraylike2object( x );\n\t\t\tdt = arr.dtype || '';\n\t\t\to = {\n\t\t\t\t'ref': x,\n\t\t\t\t'dtype': dt,\n\t\t\t\t'preSetElement': setElementWrapper( dt ),\n\t\t\t\t'postGetArray': getArrayWrapper( ndarray2fancy, opts ),\n\t\t\t\t'cache': opts.cache,\n\t\t\t\t'strict': opts.strict,\n\t\t\t\t'validator': validator( dt ),\n\t\t\t\t'ndarray2fancy': ndarray2fancy,\n\t\t\t\t'ctor': new Proxy( x.constructor || ndarray, {\n\t\t\t\t\t'construct': ctor( ndarray2fancy, opts )\n\t\t\t\t}),\n\t\t\t\t'prop2slice': prop2slice( arr.shape.length )\n\t\t\t};\n\t\t\treturn new Proxy( x, {\n\t\t\t\t'get': get( o ),\n\t\t\t\t'set': set( o )\n\t\t\t});\n\t\t}\n\t\t// TODO: replace with `@stdlib/console/warn` (or equivalent once available)\n\t\tconsole.warn( 'WARNING: Proxy objects are not supported in the current environment. Some fancy functionality may not be available.' ); // eslint-disable-line no-console\n\t\treturn x;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*\n* @example\n* var o = defaults();\n* // returns {...}\n*/\nfunction defaults() {\n\treturn {\n\t\t'cache': null, // FIXME: default index cache\n\t\t'strict': false\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js';\n\n\n// MAIN //\n\n/**\n* Converts an ndarray to an object supporting fancy indexing.\n*\n* @name ndarray2fancy\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {Options} [options] - function options\n* @param {boolean} [options.strict=false] - boolean indicating whether to enforce strict bounds checking\n* @param {Function} [options.cache] - cache for resolving ndarray index objects\n* @throws {TypeError} first argument must be ndarray-like\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndarrayLike} fancy ndarray\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = new ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var y = ndarray2fancy( x );\n* // returns <ndarray>\n*\n* var v = y[ '1:,:' ];\n* // returns <ndarray>\n*/\nvar ndarray2fancy = factory();\n\n\n// EXPORTS //\n\nexport default ndarray2fancy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an ndarray to an object supporting fancy indexing.\n*\n* @module @stdlib/ndarray-to-fancy\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2fancy from '@stdlib/ndarray-to-fancy';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = new ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var y = ndarray2fancy( x );\n* // returns <ndarray>\n*\n* var v = y[ '1:,:' ];\n* // returns <ndarray>\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport ndindex from '@stdlib/utils-noop'; // FIXME: update once we support ndarray indices\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\nsetReadOnly( main, 'idx', ndindex );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["hasSupport","Proxy","wrapComplex","value","isNumber","wrapper","ndarray2fancy","opts","x","validate","options","isObject","hasOwnProp","strict","isBoolean","TypeError","format","cache","isMethodIn","validateGeneric","validateBoolean","dtype","validateRealFloating","isComplexLike","complexDataType","validateComplexFloating","validateSignedInteger","vdt","isInteger","minSignedIntegerDataType","isSafeCast","minDataType","validateUnsignedInteger","validator","isRealFloatingDataType","isUnsignedIntegerDataType","isSignedIntegerDataType","isBooleanDataType","RE_INTEGER","RE_SUBSEQ","prop2slice","target","property","shape","prop","ch","s","trim","str2slice","Error","MultiSlice","str2multislice","test","parseInt","seq2multislice","code","RangeError","join","replace","split","length","sargs2multislice","factory","args","a","apply","hasProperty","contains","propertiesIn","ndarray","defaults","get","errMessage","msg","ctx","receiver","isFunction","i","arguments","push","this","getValue","slice","err","constructor","message","getSlice","setValue","dt","isndarrayLike","scalar2ndarray","isFloatingDataType","INT8_MAX","INT16_MAX","INT32_MAX","isComplexDataType","sliceAssign","setSlice","OPTIONS","arr","o","hasProxySupport","assign","ref","ndarraylike2object","preSetElement","postGetArray","getArrayWrapper","ctor","construct","ndims","prop2slice0d","prop2slice1d","prop2slicend","set","console","warn","setReadOnly","main","ndindex"],"mappings":"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"}