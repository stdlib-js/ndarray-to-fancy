{
  "version": 3,
  "sources": ["../lib/has_proxy_support.js", "../lib/set_element_wrapper.js", "../lib/get_ndarray_wrapper.js", "../lib/defaults.js", "../lib/validate.js", "../lib/validator.js", "../lib/is_multislice_string.js", "../lib/is_slice_string.js", "../lib/re_integer.js", "../lib/is_integer_string.js", "../lib/re_subseq.js", "../lib/is_subsequence_string.js", "../lib/is_ellipsis_string.js", "../lib/is_empty_string.js", "../lib/parse_multislice.js", "../lib/parse_slice.js", "../lib/parse_integer.js", "../lib/prop2slice.0d.js", "../lib/prop2slice.1d.js", "../lib/prop2slice.nd.js", "../lib/prop2slice.js", "../lib/ctor.js", "../lib/resolve_index.js", "../lib/getter.js", "../lib/setter.js", "../lib/re_ndindex.js", "../lib/is_ndindex_string.js", "../lib/re_cartesian_index.js", "../lib/is_cartesian_index_string.js", "../lib/get_element.js", "../lib/resolve_subscripts.js", "../lib/get_cartesian.js", "../lib/get_value.js", "../lib/error_message.js", "../lib/get_slice.js", "../lib/get.js", "../lib/set_cartesian.js", "../lib/set_element.js", "../lib/set_value.js", "../lib/set_slice.js", "../lib/set.js", "../lib/factory.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Proxy = require( '@stdlib/proxy-ctor' );\n\n\n// MAIN //\n\n/**\n* Boolean indicating if an environment has Proxy support.\n*\n* @private\n* @name hasSupport\n* @type {boolean}\n*/\nvar hasSupport = ( typeof Proxy === 'function' ); // NOTE: cannot use `@stdlib/assert/has-proxy-support` here, as that API uses code evaluation and might violate CSPs; consequently, this is a relatively weak check for proxy support\n\n\n// EXPORTS //\n\nmodule.exports = hasSupport;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isComplexDataType = require( '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\n\n\n// FUNCTIONS //\n\n/**\n* Normalizes values assigned to complex number ndarrays.\n*\n* @private\n* @param {*} value - input value\n* @returns {(ComplexLike|*)} output value\n*/\nfunction wrapComplex( value ) {\n\t// Wrap real-valued scalars as valid input arguments to complex number ndarrays...\n\tif ( isNumber( value ) ) {\n\t\treturn [ value, 0.0 ]; // note: we're assuming that a complex number ndarray setter accepts an array of interleaved real and imaginary components\n\t}\n\t// For everything other than a real-valued scalar, we delegate validation to the target complex number ndarray:\n\treturn value;\n}\n\n\n// MAIN //\n\n/**\n* Returns a wrapper function for processing scalar input values before assignment.\n*\n* @private\n* @param {string} dtype - ndarray data type\n* @returns {(Function|null)} wrapper function or null\n*/\nfunction wrapper( dtype ) {\n\tif ( isComplexDataType( dtype ) ) {\n\t\treturn wrapComplex;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = wrapper;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a wrapper function for processing ndarrays after retrieval.\n*\n* @private\n* @param {Function} ndarray2fancy - function for creating a proxied ndarray\n* @param {Object} opts - options\n* @param {boolean} opts.strict - boolean indicating whether to perform strict bounds checking\n* @param {Function} opts.cache - cache for resolving ndarray index objects\n* @returns {Function} wrapper function\n*/\nfunction wrapper( ndarray2fancy, opts ) {\n\treturn wrap;\n\n\t/**\n\t* Returns a proxied ndarray.\n\t*\n\t* @private\n\t* @param {ndarray} x - input ndarray\n\t* @returns {ndarray} proxied ndarray\n\t*/\n\tfunction wrap( x ) {\n\t\treturn ndarray2fancy( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = wrapper;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ndindex = require( '@stdlib/ndarray-index' );\n\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*\n* @example\n* var o = defaults();\n* // returns {...}\n*/\nfunction defaults() {\n\treturn {\n\t\t'cache': ndindex,\n\t\t'strict': false\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isMethodIn = require( '@stdlib/assert-is-method-in' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @param {Function} [options.cache] - cache for resolving array index objects\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'strict': false\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\topts.strict = options.strict;\n\t\tif ( !isBoolean( opts.strict ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'strict', opts.strict ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'cache' ) ) {\n\t\topts.cache = options.cache;\n\t\tif ( !isMethodIn( opts.cache, 'get' ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option is missing a `%s` method. Option: `%s`.', 'cache', 'get', opts.cache ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isComplexLike = require( '@stdlib/assert-is-complex-like' );\nvar isRealFloatingDataType = require( '@stdlib/ndarray-base-assert-is-real-floating-point-data-type' );\nvar isUnsignedIntegerDataType = require( '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type' );\nvar isSignedIntegerDataType = require( '@stdlib/ndarray-base-assert-is-signed-integer-data-type' );\nvar isBooleanDataType = require( '@stdlib/ndarray-base-assert-is-boolean-data-type' );\nvar isSafeCast = require( '@stdlib/ndarray-base-assert-is-safe-data-type-cast' );\nvar minDataType = require( '@stdlib/ndarray-min-dtype' );\nvar minSignedIntegerDataType = require( '@stdlib/ndarray-base-min-signed-integer-dtype' );\nvar complexDataType = require( '@stdlib/complex-dtype' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a \"generic\" or unknown data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {null} null\n*\n* @example\n* var err = validateGeneric( 3, 'generic' );\n* // returns null\n*/\nfunction validateGeneric() {\n\treturn null;\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a boolean data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = validateBoolean( true, 'bool' );\n* // returns null\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n*\n* var err = validateBoolean( new Complex128( 5.0, 6.0 ), 'bool' );\n* // returns <TypeError>\n*/\nfunction validateBoolean( value, dtype ) {\n\tif ( isBoolean( value ) ) {\n\t\treturn null;\n\t}\n\treturn new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', typeof value, dtype ) );\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a real-valued floating-point data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = validateRealFloating( 3.14, 'float64' );\n* // returns null\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n*\n* var err = validateRealFloating( new Complex128( 5.0, 6.0 ), 'float64' );\n* // returns <TypeError>\n*/\nfunction validateRealFloating( value, dtype ) {\n\tif ( isNumber( value ) ) {\n\t\treturn null;\n\t}\n\tif ( isComplexLike( value ) ) {\n\t\treturn new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', complexDataType( value ), dtype ) );\n\t}\n\treturn new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', typeof value, dtype ) );\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a complex-valued floating-point data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n*\n* var err = validateComplexFloating( new Complex128( 5.0, 6.0 ), 'complex128' );\n* // returns null\n*\n* @example\n* var err = validateComplexFloating( {}, 'complex128' );\n* // returns <TypeError>\n*/\nfunction validateComplexFloating( value, dtype ) {\n\tif ( isNumber( value ) || isComplexLike( value ) ) {\n\t\treturn null;\n\t}\n\treturn new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', typeof value, dtype ) );\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having a signed integer data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = validateSignedInteger( 3, 'int32' );\n* // returns null\n*\n* @example\n* var err = validateSignedInteger( 3.14, 'int32' );\n* // returns <TypeError>\n*/\nfunction validateSignedInteger( value, dtype ) {\n\tvar vdt;\n\tif ( isNumber( value ) ) {\n\t\tif ( !isInteger( value ) ) {\n\t\t\treturn new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', minDataType( value ), dtype ) );\n\t\t}\n\t\tvdt = minSignedIntegerDataType( value );\n\t\tif ( isSafeCast( vdt, dtype ) ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', vdt, dtype ) );\n\t}\n\tif ( isComplexLike( value ) ) {\n\t\treturn new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', complexDataType( value ), dtype ) );\n\t}\n\treturn new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', typeof value, dtype ) );\n}\n\n/**\n* Verifies whether a provided value can be safely assigned to an element in an array having an unsigned integer data type.\n*\n* @private\n* @param {*} value - input value\n* @param {string} dtype - array data type\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = validateUnsignedInteger( 3, 'uint32' );\n* // returns null\n*\n* @example\n* var err = validateUnsignedInteger( -3, 'uint32' );\n* // returns <TypeError>\n*/\nfunction validateUnsignedInteger( value, dtype ) {\n\tvar vdt;\n\tif ( isNumber( value ) ) {\n\t\tvdt = minDataType( value ); // note: we rely on data type resolution to handle the case where `value` is a non-integer value. In that case, `vdt` will resolve to a floating-point data type and `isSafeCast` will evaluate to `false`\n\t\tif ( isSafeCast( vdt, dtype ) ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', vdt, dtype ) );\n\t}\n\tif ( isComplexLike( value ) ) {\n\t\treturn new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', complexDataType( value ), dtype ) );\n\t}\n\treturn new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', typeof value, dtype ) );\n}\n\n\n// MAIN //\n\n/**\n* Returns a validation function for verifying whether a provided value can be safely assigned to an element in an array having a specified data type.\n*\n* @private\n* @param {string} dtype - array data type\n* @returns {Function} validation function\n*\n* @example\n* var fcn = validator( 'int32' );\n*\n* var err = fcn( 3, 'int32' );\n* // returns null\n*\n* err = fcn( 3.14, 'int32' );\n* // returns <TypeError>\n*/\nfunction validator( dtype ) {\n\tif ( dtype === 'generic' || dtype === '' ) {\n\t\treturn validateGeneric;\n\t}\n\tif ( isRealFloatingDataType( dtype ) ) {\n\t\treturn validateRealFloating;\n\t}\n\tif ( isUnsignedIntegerDataType( dtype ) ) {\n\t\treturn validateUnsignedInteger;\n\t}\n\tif ( isSignedIntegerDataType( dtype ) ) {\n\t\treturn validateSignedInteger;\n\t}\n\tif ( isBooleanDataType( dtype ) ) {\n\t\treturn validateBoolean;\n\t}\n\t// Case: isComplexDataType( dtype ) === true\n\treturn validateComplexFloating;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar startsWith = require( '@stdlib/string-base-starts-with' );\n\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is a serialized MultiSlice object.\n*\n* @private\n* @param {string} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isMultiSliceString( 'MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))' );\n* // returns true\n*\n* @example\n* var out = isMultiSliceString( ':' );\n* // returns false\n*/\nfunction isMultiSliceString( prop ) {\n\treturn (\n\t\tprop[ 0 ] === 'M' &&\n\t\tstartsWith( prop, 'MultiSlice(', 0 ) &&\n\t\tprop[ prop.length-1 ] === ')'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isMultiSliceString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar startsWith = require( '@stdlib/string-base-starts-with' );\n\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is a serialized Slice object.\n*\n* @private\n* @param {string} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isSliceString( 'Slice(0,10,2)' );\n* // returns true\n*\n* @example\n* var out = isSliceString( ':' );\n* // returns false\n*/\nfunction isSliceString( prop ) {\n\treturn (\n\t\tprop[ 0 ] === 'S' &&\n\t\tstartsWith( prop, 'Slice(', 0 ) &&\n\t\tprop[ prop.length-1 ] === ')'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isSliceString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is an integer string.\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*\n* @example\n* var bool = RE_INTEGER.test( '10' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '-1' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '0:10:2' );\n* // returns false\n*/\nvar RE_INTEGER = /^-?[0-9]+$/;\n\n\n// EXPORTS //\n\nmodule.exports = RE_INTEGER;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar RE_INTEGER = require( './re_integer.js' );\n\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is an integer.\n*\n* @private\n* @param {(string|symbol)} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isIntegerString( '1' );\n* // returns true\n*\n* @example\n* var out = isIntegerString( ':' );\n* // returns false\n*/\nfunction isIntegerString( prop ) {\n\treturn ( isString( prop ) && RE_INTEGER.test( prop ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isIntegerString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is a subsequence string.\n*\n* @private\n* @name RE_SUBSEQ\n* @type {RegExp}\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0:10:2' );\n* // returns true\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0' );\n* // returns false\n*\n* @example\n* var bool = RE_SUBSEQ.test( 'Slice(0,10,2)' );\n* // returns false\n*/\nvar RE_SUBSEQ = /:/;\n\n\n// EXPORTS //\n\nmodule.exports = RE_SUBSEQ;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar RE_SUBSEQ = require( './re_subseq.js' );\n\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is a subsequence.\n*\n* @private\n* @param {string} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isSubsequenceString( '::-2' );\n* // returns true\n*\n* @example\n* var out = isSubsequenceString( '10,1,::-1,:,-5,2::3' );\n* // returns true\n*\n* @example\n* var out = isSubsequenceString( '...' );\n* // returns false\n*\n* @example\n* var out = isSubsequenceString( '-2' );\n* // returns false\n*/\nfunction isSubsequenceString( prop ) {\n\t// TODO: consider whether to make this check more robust (e.g., should we actually throw if someone tries to access `foo:bar`? If we make this check more exact, how would we distinguish between a non-existent `foo:bar` property and an actual error in the subsequence string?)\n\treturn RE_SUBSEQ.test( prop );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isSubsequenceString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is an ellipsis expression.\n*\n* @private\n* @param {string} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isEllipsisString( '...' );\n* // returns true\n*\n* @example\n* var out = isEllipsisString( '::-2' );\n* // returns false\n*\n* @example\n* var out = isEllipsisString( '-2' );\n* // returns false\n*/\nfunction isEllipsisString( prop ) {\n\treturn ( prop === '...' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isEllipsisString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is an empty string.\n*\n* @private\n* @param {string} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isEmptyString( '' );\n* // returns true\n*\n* @example\n* var out = isEmptyString( '...' );\n* // returns false\n*\n* @example\n* var out = isEmptyString( '-2' );\n* // returns false\n*/\nfunction isEmptyString( prop ) {\n\treturn ( prop === '' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isEmptyString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar str2multislice = require( '@stdlib/slice-base-str2multislice' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Parses a serialized MultiSlice object.\n*\n* @private\n* @param {string} raw - original unprocessed input string\n* @param {string} str - serialized MultiSlice object\n* @throws {Error} invalid slice operation\n* @returns {MultiSlice} MultiSlice object\n*\n* @example\n* var s = parseMultiSlice( '  MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))  ', 'MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))' );\n* // returns <MultiSlice>\n*/\nfunction parseMultiSlice( raw, str ) {\n\tvar s = str2multislice( str );\n\tif ( s === null ) {\n\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', raw ) );\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nmodule.exports = parseMultiSlice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar str2slice = require( '@stdlib/slice-base-str2slice' );\nvar MultiSlice = require( '@stdlib/slice-multi' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Parses a serialized Slice object.\n*\n* @private\n* @param {string} raw - original unprocessed input string\n* @param {string} str - serialized Slice object\n* @throws {Error} invalid slice operation\n* @returns {MultiSlice} MultiSlice object\n*\n* @example\n* var s = parseSlice( '  Slice(0,10,2)  ', 'Slice(0,10,2)' );\n* // returns <MultiSlice>\n*/\nfunction parseSlice( raw, str ) {\n\t// Convert the string to a slice object:\n\tvar s = str2slice( str );\n\tif ( s === null ) {\n\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', raw ) );\n\t}\n\t// Create a multi-slice:\n\treturn new MultiSlice( s );\n}\n\n\n// EXPORTS //\n\nmodule.exports = parseSlice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar MultiSlice = require( '@stdlib/slice-multi' );\n\n\n// MAIN //\n\n/**\n* Parses a serialized integer.\n*\n* @private\n* @param {string} raw - original unprocessed input string\n* @param {string} str - serialized integer\n* @returns {MultiSlice} MultiSlice object\n*\n* @example\n* var s = parseInteger( '  1  ', '1' );\n* // returns <MultiSlice>\n*/\nfunction parseInteger( raw, str ) {\n\treturn new MultiSlice( parseInt( str, 10 ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = parseInteger;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar trim = require( '@stdlib/string-base-trim' );\nvar replace = require( '@stdlib/string-base-replace' );\nvar MultiSlice = require( '@stdlib/slice-multi' );\nvar seq2multislice = require( '@stdlib/slice-base-seq2multislice' );\nvar getShape = require( '@stdlib/ndarray-base-shape' );\nvar format = require( '@stdlib/string-format' );\nvar isMultiSlice = require( './is_multislice_string.js' );\nvar isSlice = require( './is_slice_string.js' );\nvar isInteger = require( './is_integer_string.js' );\nvar isSubsequence = require( './is_subsequence_string.js' );\nvar isEllipsis = require( './is_ellipsis_string.js' );\nvar isEmptyString = require( './is_empty_string.js' );\nvar parseMultiSlice = require( './parse_multislice.js' );\nvar parseSlice = require( './parse_slice.js' );\nvar parseInteger = require( './parse_integer.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Parses a subsequence string.\n*\n* @private\n* @param {string} raw - original unprocessed input string\n* @param {string} str - subsequence string\n* @param {NonNegativeIntegerArray} shape - array dimensions\n* @throws {Error} invalid slice operation\n* @throws {RangeError} slice exceeds array bounds\n* @returns {MultiSlice} MultiSlice object\n*\n* @example\n* var s = parseSubsequence( ' ... ', '...', [], false );\n* // returns <MultiSlice>\n*/\nfunction parseSubsequence( raw, str, shape ) {\n\tvar s = seq2multislice( str, shape, true );\n\tif ( s.code ) {\n\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', raw ) );\n\t\t}\n\t\t// s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS'\n\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), replace( str, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t}\n\treturn s;\n}\n\n\n// MAIN //\n\n/**\n* Converts a zero-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property ) {\n\tvar prop = trim( property );\n\tif ( isEmptyString( prop ) || isEllipsis( prop ) ) {\n\t\treturn new MultiSlice();\n\t}\n\tif ( isSlice( prop ) ) {\n\t\treturn parseSlice( property, prop );\n\t}\n\tif ( isMultiSlice( prop ) ) {\n\t\treturn parseMultiSlice( property, prop );\n\t}\n\tif ( isInteger( prop ) ) {\n\t\treturn parseInteger( property, prop );\n\t}\n\tif ( isSubsequence( prop ) ) {\n\t\treturn parseSubsequence( property, prop, getShape( target, false ) );\n\t}\n\t// Everything else (including undefined/non-existent properties):\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = prop2slice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar trim = require( '@stdlib/string-base-trim' );\nvar replace = require( '@stdlib/string-base-replace' );\nvar seq2multislice = require( '@stdlib/slice-base-seq2multislice' );\nvar getShape = require( '@stdlib/ndarray-base-shape' );\nvar format = require( '@stdlib/string-format' );\nvar isSlice = require( './is_slice_string.js' );\nvar isMultiSlice = require( './is_multislice_string.js' );\nvar isInteger = require( './is_integer_string.js' );\nvar isSubsequence = require( './is_subsequence_string.js' );\nvar isEllipsis = require( './is_ellipsis_string.js' );\nvar parseMultiSlice = require( './parse_multislice.js' );\nvar parseSlice = require( './parse_slice.js' );\nvar parseInteger = require( './parse_integer.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Parses a subsequence string.\n*\n* @private\n* @param {string} raw - original unprocessed input string\n* @param {string} str - subsequence string\n* @param {NonNegativeIntegerArray} shape - array dimensions\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} slice exceeds array bounds\n* @returns {MultiSlice} MultiSlice object\n*\n* @example\n* var s = parseSubsequence( ' :10 ', ':10', [ 10 ], false );\n* // returns <MultiSlice>\n*/\nfunction parseSubsequence( raw, str, shape, strict ) {\n\tvar s = seq2multislice( str, shape, true );\n\tif ( s.code ) {\n\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS' ) {\n\t\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), replace( str, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t\t}\n\t\t// NOTE: the following error check must come last due to fall-through when in non-strict mode...\n\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\tif ( strict ) {\n\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t}\n\t\t\t// Repeat parsing, this time allowing for out-of-bounds slices:\n\t\t\ts = seq2multislice( str, shape, false );\n\t\t}\n\t}\n\treturn s;\n}\n\n\n// MAIN //\n\n/**\n* Converts a one-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property, strict ) {\n\tvar prop = trim( property );\n\tif ( isSlice( prop ) ) {\n\t\treturn parseSlice( property, prop );\n\t}\n\tif ( isMultiSlice( prop ) ) {\n\t\treturn parseMultiSlice( property, prop );\n\t}\n\tif ( isInteger( prop ) ) {\n\t\treturn parseInteger( property, prop );\n\t}\n\tif ( isSubsequence( prop ) || isEllipsis( prop ) ) {\n\t\treturn parseSubsequence( property, prop, getShape( target, false ), strict ); // eslint-disable-line max-len\n\t}\n\t// Everything else (including an empty string and undefined/non-existent properties):\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = prop2slice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar trim = require( '@stdlib/string-base-trim' );\nvar replace = require( '@stdlib/string-base-replace' );\nvar seq2multislice = require( '@stdlib/slice-base-seq2multislice' );\nvar sargs2multislice = require( '@stdlib/slice-base-sargs2multislice' );\nvar getShape = require( '@stdlib/ndarray-base-shape' );\nvar format = require( '@stdlib/string-format' );\nvar isSubsequence = require( './is_subsequence_string.js' );\nvar isEllipsis = require( './is_ellipsis_string.js' );\nvar isMultiSlice = require( './is_multislice_string.js' );\nvar isEmptyString = require( './is_empty_string.js' );\nvar parseMultiSlice = require( './parse_multislice.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Parses a subsequence string.\n*\n* @private\n* @param {string} raw - original unprocessed input string\n* @param {string} str - subsequence string\n* @param {NonNegativeIntegerArray} shape - array dimensions\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} slice exceeds array bounds\n* @returns {MultiSlice} MultiSlice object\n*\n* @example\n* var s = parseSubsequence( ' :10,1,::-1,:,-5,2::3 ', ':10,1,::-1,:,-5,2::3', [ 10, 10, 10, 10, 10, 10 ], false );\n* // returns <MultiSlice>\n*/\nfunction parseSubsequence( raw, str, shape, strict ) {\n\tvar s = seq2multislice( str, shape, true );\n\tif ( s.code ) {\n\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', raw ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS' || s.code === 'ERR_SLICE_INSUFFICIENT_DIMENSIONS' ) {\n\t\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), replace( str, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t\t}\n\t\t// NOTE: the following error check must come last due to fall-through when in non-strict mode...\n\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\tif ( strict ) {\n\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t}\n\t\t\t// Repeat parsing, this time allowing for out-of-bounds slices:\n\t\t\ts = seq2multislice( str, shape, false );\n\t\t}\n\t}\n\treturn s;\n}\n\n\n// MAIN //\n\n/**\n* Converts an n-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property, strict ) {\n\tvar prop = trim( property );\n\n\t// Case: multi-slice (e.g., 'MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))')\n\tif ( isMultiSlice( prop ) ) {\n\t\treturn parseMultiSlice( property, prop );\n\t}\n\t// Case: subsequence string (e.g., '...' or ':10,1,::-1,:,-5,2::3')\n\tif ( isSubsequence( prop ) || isEllipsis( prop ) ) {\n\t\treturn parseSubsequence( property, prop, getShape( target, false ), strict ); // eslint-disable-line max-len\n\t}\n\t// Case: empty string\n\tif ( isEmptyString( prop ) ) {\n\t\t// Note that this is likely an error condition, but we explicitly handle here in order to match 1-D behavior and treat similarly to undefined/non-existing properties:\n\t\treturn null;\n\t}\n\t// Case: array syntax (e.g., x[ [ Slice(0,10,1), null, Slice(4,null,-1) ] ] or x['1,2,3,4']) or Slice or integer or arbitrary string (including undefined/non-existent properties)\n\treturn sargs2multislice( prop ); // note: will return `null` for invalid slice syntax and undefined/non-existing properties\n}\n\n\n// EXPORTS //\n\nmodule.exports = prop2slice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar prop2slice0d = require( './prop2slice.0d.js' );\nvar prop2slice1d = require( './prop2slice.1d.js' );\nvar prop2slicend = require( './prop2slice.nd.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for converting a property string to a slice according to a specified dimensionality.\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @returns {Function} function for converting a property string to a slice\n*/\nfunction prop2slice( ndims ) {\n\tif ( ndims === 0 ) {\n\t\treturn prop2slice0d;\n\t}\n\tif ( ndims === 1 ) {\n\t\treturn prop2slice1d;\n\t}\n\treturn prop2slicend;\n}\n\n\n// EXPORTS //\n\nmodule.exports = prop2slice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a trap for constructing new ndarray instances.\n*\n* @private\n* @param {Function} ndarray2fancy - function for creating a proxied ndarray\n* @param {Object} opts - options\n* @param {boolean} opts.strict - boolean indicating whether to perform strict bounds checking\n* @param {Function} opts.cache - cache for resolving ndarray index objects\n* @returns {Function} handler\n*/\nfunction factory( ndarray2fancy, opts ) {\n\treturn constructor;\n\n\t/**\n\t* Trap for constructing new ndarray instances.\n\t*\n\t* @private\n\t* @param {Object} target - target object\n\t* @param {Array} args - list of constructor arguments\n\t* @param {Object} newTarget - constructor that was originally called\n\t* @returns {*} new instance\n\t*/\n\tfunction constructor( target, args ) {\n\t\tvar x;\n\t\tvar a;\n\n\t\ta = args;\n\t\tswitch ( a.length ) {\n\t\tcase 0:\n\t\t\tx = new target();\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tx = new target( a[0] );\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tx = new target( a[0], a[1] );\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tx = new target( a[0], a[1], a[2] );\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tx = new target( a[0], a[1], a[2], a[3] );\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4] );\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5] );\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5], a[6] );\n\t\t\tbreak;\n\t\tcase 8:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7] );\n\t\t\tbreak;\n\t\tcase 9:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8] ); // eslint-disable-line max-len\n\t\t\tbreak;\n\t\tcase 10:\n\t\t\tx = new target( a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9] ); // eslint-disable-line max-len\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// Fallback to using `apply`; however, some constructors may error if the constructor is not callable (i.e., if a constructor always requires `new`):\n\t\t\tx = target.apply( null, a );\n\t\t}\n\t\treturn ndarray2fancy( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar normalizeIndex = require( '@stdlib/ndarray-base-normalize-index' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Resolves an integer index from an integer string.\n*\n* ## Notes\n*\n* -   In non-strict mode, if provided an out-of-bounds index, the function returns `-1`.\n*\n* @private\n* @param {string} str - integer string\n* @param {NonNegativeInteger} max - index upper bound (exclusive)\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} index exceeds ndarray bounds\n* @returns {integer} integer index\n*\n* @example\n* var idx = resolveIndex( '-1', 10, false );\n* // returns 9\n*\n* @example\n* var idx = resolveIndex( '-20', 10, false );\n* // returns -1\n*/\nfunction resolveIndex( str, max, strict ) {\n\tvar idx;\n\tvar i;\n\n\tidx = parseInt( str, 10 );\n\ti = normalizeIndex( idx, max-1 );\n\tif ( i === -1 && strict ) {\n\t\tthrow new RangeError( format( 'invalid operation. Index exceeds ndarray bounds.' ) );\n\t}\n\treturn i;\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolveIndex;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isMethodIn = require( '@stdlib/assert-is-method-in' );\nvar getShape = require( '@stdlib/ndarray-base-shape' ); // note: we intentionally use the \"base\" version, as every ndarray-like object should have a shape property\nvar getStrides = require( '@stdlib/ndarray-strides' );\nvar getOrder = require( '@stdlib/ndarray-order' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar ind2sub = require( '@stdlib/ndarray-base-ind2sub' );\nvar resolveIndex = require( './resolve_index.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns an ndarray element according to a linear index.\n*\n* ## Notes\n*\n* -   This function assumes the presence of an `#.iget` method, which all stdlib ndarrays are expected to have.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @param {string} idx - linear index string\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} index exceeds ndarray bounds\n* @returns {(*|void)} value\n*/\nfunction iget( x, idx, strict ) {\n\tidx = resolveIndex( idx, numel( getShape( x, false ) ), strict );\n\tif ( idx === -1 ) {\n\t\t// Even for 0-D ndarrays, where, at least in stdlib, one may provide an index argument to `iget`, always return undefined...\n\t\treturn;\n\t}\n\treturn x.iget( idx );\n}\n\n/**\n* Returns an ndarray element according to a linear index.\n*\n* ## Notes\n*\n* -   For ndarray-like objects not having an `#.iget` method, this function falls back to resolving a linear index to an array of corresponding subscripts and calling a `#.get` method, which all ndarray-like objects are expected to have.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @param {string} idx - linear index string\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} index exceeds ndarray bounds\n* @returns {(*|void)} value\n*/\nfunction get( x, idx, strict ) {\n\tvar sub;\n\tvar sh;\n\n\tsh = getShape( x, false );\n\tidx = resolveIndex( idx, numel( sh ), strict );\n\n\t// In non-strict mode, avoid triggering an exception and always return undefined if unable to resolve a linear index...\n\tif ( idx === -1 ) {\n\t\treturn;\n\t}\n\t// Convert a linear index to an array of subscripts according to the current ndarray view:\n\tsub = ind2sub( sh, getStrides( x ), 0, getOrder( x ), idx, 'throw' );\n\n\t// Use the `#.get` method, which every ndarray-like object is expected to have, in order to resolve an ndarray element:\n\treturn x.get.apply( x, sub );\n}\n\n\n// MAIN //\n\n/**\n* Returns an accessor for retrieving an ndarray element according to a linear index.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {Function} accessor function\n*/\nfunction getter( x ) {\n\tif ( isMethodIn( x, 'iget' ) ) {\n\t\treturn iget;\n\t}\n\treturn get;\n}\n\n\n// EXPORTS //\n\nmodule.exports = getter;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isMethodIn = require( '@stdlib/assert-is-method-in' );\nvar getShape = require( '@stdlib/ndarray-base-shape' ); // note: we intentionally use the \"base\" version, as every ndarray-like object should have a shape property\nvar getStrides = require( '@stdlib/ndarray-strides' );\nvar getOrder = require( '@stdlib/ndarray-order' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar ind2sub = require( '@stdlib/ndarray-base-ind2sub' );\nvar resolveIndex = require( './resolve_index.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Sets an ndarray element according to a linear index.\n*\n* ## Notes\n*\n* -   This function assumes the presence of an `#.iset` method, which all stdlib ndarrays are expected to have.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @param {string} idx - linear index string\n* @param {*} value - new value\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} index exceeds ndarray bounds\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction iset( x, idx, value, strict ) {\n\tidx = resolveIndex( idx, numel( getShape( x, false ) ), strict );\n\tif ( idx === -1 ) {\n\t\treturn false;\n\t}\n\tx.iset( idx, value );\n\treturn true;\n}\n\n/**\n* Sets an ndarray element according to a linear index.\n*\n* ## Notes\n*\n* -   For ndarray-like objects not having an `#.iset` method, this function falls back to resolving a linear index to an array of corresponding subscripts and calling a `#.set` method, which all ndarray-like objects are expected to have.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @param {string} idx - linear index string\n* @param {*} value - new value\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} index exceeds ndarray bounds\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction set( x, idx, value, strict ) {\n\tvar sub;\n\tvar sh;\n\n\tsh = getShape( x, false );\n\tidx = resolveIndex( idx, numel( sh ), strict );\n\n\t// In non-strict mode, avoid triggering an exception and always fail assignment if unable to resolve a linear index...\n\tif ( idx === -1 ) {\n\t\treturn false;\n\t}\n\t// Convert a linear index to an array of subscripts according to the current ndarray view:\n\tsub = ind2sub( sh, getStrides( x ), 0, getOrder( x ), idx, 'throw' );\n\n\t// Append the new value to the subscripts array:\n\tsub.push( value );\n\n\t// Use the `#.set` method, which every ndarray-like object is expected to have, in order to update an ndarray element:\n\tx.set.apply( x, sub );\n\n\treturn true;\n}\n\n\n// MAIN //\n\n/**\n* Returns an accessor for setting an ndarray element according to a linear index.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {Function} accessor function\n*/\nfunction setter( x ) {\n\tif ( isMethodIn( x, 'iset' ) ) {\n\t\treturn iset;\n\t}\n\treturn set;\n}\n\n\n// EXPORTS //\n\nmodule.exports = setter;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is a serialized ndarray index.\n*\n* @private\n* @name RE_NDINDEX\n* @type {RegExp}\n*\n* @example\n* var bool = RE_NDINDEX.test( 'ndindex<0>' );\n* // returns true\n*\n* @example\n* var bool = RE_NDINDEX.test( '0' );\n* // returns false\n*\n* @example\n* var bool = RE_NDINDEX.test( 'Slice(0,10,2)' );\n* // returns false\n*/\nvar RE_NDINDEX = /\\s*ndindex<[^>]+>\\s*/;\n\n\n// EXPORTS //\n\nmodule.exports = RE_NDINDEX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar RE_NDINDEX = require( './re_ndindex.js' );\n\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is a serialized ndarray index.\n*\n* @private\n* @param {(string|symbol)} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isArrayIndexString( 'ndindex<0>' );\n* // returns true\n*\n* @example\n* var out = isArrayIndexString( ':' );\n* // returns false\n*/\nfunction isArrayIndexString( prop ) {\n\treturn ( isString( prop ) && RE_NDINDEX.test( prop ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isArrayIndexString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is a serialized Cartesian index.\n*\n* @private\n* @name RE_CARTESIAN_INDEX\n* @type {RegExp}\n*\n* @example\n* var bool = RE_CARTESIAN_INDEX.test( '10,10,10' );\n* // returns true\n*\n* @example\n* var bool = RE_CARTESIAN_INDEX.test( '10, 10' );\n* // returns true\n*\n* @example\n* var bool = RE_CARTESIAN_INDEX.test( '10, -10, 10' );\n* // returns true\n*\n* @example\n* var bool = RE_CARTESIAN_INDEX.test( '1' );\n* // returns false\n*\n* @example\n* var bool = RE_CARTESIAN_INDEX.test( '-1' );\n* // returns false\n*\n* @example\n* var bool = RE_CARTESIAN_INDEX.test( '0:10:2' );\n* // returns false\n*/\nvar RE_CARTESIAN_INDEX = /^\\s*(?:-?[0-9]+)\\s*(?:,\\s*(?:-?[0-9]+)\\s*)*,\\s*(?:-?[0-9]+)\\s*$/;\n\n\n// EXPORTS //\n\nmodule.exports = RE_CARTESIAN_INDEX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar RE_CARTESIAN_INDEX = require( './re_cartesian_index.js' );\n\n\n// MAIN //\n\n/**\n* Tests if an indexing expression is a serialized Cartesian index.\n*\n* @private\n* @param {string} prop - property name\n* @returns {boolean} result\n*\n* @example\n* var out = isCartesianIndexString( '1,2,3' );\n* // returns true\n*\n* @example\n* var out = isCartesianIndexString( '1' );\n* // returns false\n*\n* @example\n* var out = isCartesianIndexString( ':' );\n* // returns false\n*/\nfunction isCartesianIndexString( prop ) {\n\treturn RE_CARTESIAN_INDEX.test( prop );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isCartesianIndexString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar scalar2ndarrayLike = require( '@stdlib/ndarray-base-from-scalar-like' );\n\n\n// MAIN //\n\n/**\n* Returns the element associated with a specified index.\n*\n* @private\n* @param {ndarrayLike} target - target object\n* @param {string} property - index string\n* @param {Object} ctx - context object\n* @param {Function} ctx.getter - accessor for retrieving array elements\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.postGetArray - function to process a retrieved ndarray\n* @throws {RangeError} index exceeds ndarray bounds\n* @returns {(ndarrayLike|void)} result\n*/\nfunction getElement( target, property, ctx ) {\n\tvar v = ctx.getter( target, property, ctx.strict );\n\tif ( v === void 0 ) {\n\t\treturn;\n\t}\n\treturn ctx.postGetArray( scalar2ndarrayLike( target, v ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = getElement;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string-format' );\nvar resolveIndex = require( './resolve_index.js' );\n\n\n// MAIN //\n\n/**\n* Resolves a list of subscripts from a serialized string of Cartesian indices.\n*\n* ## Notes\n*\n* -   In non-strict mode, if provided an out-of-bounds subscript, the function returns `undefined`.\n*\n* @private\n* @param {string} str - Cartesian indices string\n* @param {NonNegativeIntegerArray} shape - dimensions\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} index exceeds ndarray bounds\n* @throws {RangeError} number of indices must match the number of ndarray dimensions\n* @returns {(NonNegativeIntegerArray|void)} result\n*/\nfunction resolveSubscripts( str, shape, strict ) {\n\tvar ndims;\n\tvar out;\n\tvar idx;\n\tvar i;\n\n\tndims = shape.length;\n\n\t// TODO: add support for serialized CartesianIndex instances: 'CartesianIndex(i,j,k)' => str2cartesian (similar to str2slice)\n\n\tout = str.split( /\\s*,\\s*/ );\n\tif ( out.length !== ndims ) {\n\t\tthrow new RangeError( format( 'invalid operation. Number of indices does not match the number of array dimensions. Array shape: (%s). Index dimensions: %u.', shape.join( ',' ), out.length ) );\n\t}\n\t// Normalize each subscript...\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tidx = resolveIndex( out[ i ], shape[ i ], strict );\n\t\tif ( idx === -1 ) {\n\t\t\t// In non-strict mode, match normal object behavior by returning `undefined` for undefined/non-existent properties...\n\t\t\treturn;\n\t\t}\n\t\tout[ i ] = idx;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolveSubscripts;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar scalar2ndarrayLike = require( '@stdlib/ndarray-base-from-scalar-like' );\nvar getShape = require( '@stdlib/ndarray-base-shape' );\nvar resolveSubscripts = require( './resolve_subscripts.js' );\n\n\n// MAIN //\n\n/**\n* Returns the element associated with a specified set of subscripts.\n*\n* @private\n* @param {ndarrayLike} target - target object\n* @param {string} property - index string\n* @param {Object} ctx - context object\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.postGetArray - function to process a retrieved ndarray\n* @throws {RangeError} index exceeds ndarray bounds\n* @throws {RangeError} number of indices must match the number of ndarray dimensions\n* @returns {(ndarrayLike|void)} result\n*/\nfunction getCartesian( target, property, ctx ) {\n\tvar sub;\n\tvar v;\n\n\tsub = resolveSubscripts( property, getShape( target, false ), ctx.strict );\n\tif ( sub === void 0 ) {\n\t\treturn;\n\t}\n\t// Use the `get` method, which we expect every ndarray-like object to have, in order to resolve a single element:\n\tv = target.get.apply( target, sub );\n\tif ( v === void 0 ) {\n\t\treturn;\n\t}\n\t// Return the element as a 0-D ndarray to ensure consistency with linear indexing and slicing:\n\treturn ctx.postGetArray( scalar2ndarrayLike( target, v ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = getCartesian;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\n\n\n// MAIN //\n\n/**\n* Returns the property value associated with a specified property.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @param {Object} ctx - context object\n* @param {Function} ctx.ctor - proxied ndarray constructor\n* @returns {*} result\n*/\nfunction getValue( target, property, receiver, ctx ) {\n\tvar value = target[ property ];\n\tif ( isFunction( value ) ) {\n\t\tif ( value === target.constructor ) {\n\t\t\treturn ctx.ctor;\n\t\t}\n\t\treturn wrapper;\n\t}\n\treturn value;\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = getValue;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar replace = require( '@stdlib/string-base-replace' );\n\n\n// MAIN //\n\n/**\n* Returns an updated error message for trapped errors.\n*\n* @private\n* @param {string} msg - error message\n* @returns {string} updated message\n*/\nfunction errMessage( msg ) {\n\treturn replace( msg, /^invalid arguments?/, 'invalid operation' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = errMessage;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar slice = require( '@stdlib/ndarray-base-slice' );\nvar errMessage = require( './error_message.js' );\n\n\n// MAIN //\n\n/**\n* Returns an ndarray view.\n*\n* @private\n* @param {ndarrayLike} target - target object\n* @param {string} property - property name\n* @param {Object} ctx - context object\n* @param {Function} ctx.postGetArray - function to process a retrieved ndarray\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.prop2slice - function for converting an indexing expression to a slice\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of ndarray dimensions\n* @returns {ndarrayLike} result\n*/\nfunction getSlice( target, property, ctx ) {\n\tvar s = ctx.prop2slice( target, property, ctx.strict );\n\tif ( s === null ) {\n\t\t// Ensure consistency with normal object behavior by returning `undefined` for any \"unrecognized\" property name:\n\t\treturn;\n\t}\n\ttry {\n\t\treturn ctx.postGetArray( slice( target, s, ctx.strict, false ) );\n\t} catch ( err ) {\n\t\t// In principle, we should only error when in \"strict\" mode and a slice exceeds ndarray bounds...\n\t\tthrow new err.constructor( errMessage( err.message ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = getSlice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar hasProperty = require( '@stdlib/assert-has-property' );\nvar isIntegerString = require( './is_integer_string.js' );\nvar isArrayIndexString = require( './is_ndindex_string.js' );\nvar isCartesianIndexString = require( './is_cartesian_index_string.js' );\nvar getElement = require( './get_element.js' );\nvar getCartesian = require( './get_cartesian.js' );\nvar getValue = require( './get_value.js' );\nvar getSlice = require( './get_slice.js' );\n\n\n// MAIN //\n\n/**\n* Returns a trap for retrieving property values.\n*\n* @private\n* @param {Object} ctx - context object\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.ctor - proxied ndarray constructor\n* @param {Function} ctx.postGetArray - function to process a retrieved ndarray\n* @param {Object} ctx.cache - cache for resolving array index objects\n* @param {Function} ctx.prop2slice - function for converting an indexing expression to a slice\n* @returns {Function} handler\n*/\nfunction factory( ctx ) {\n\treturn get;\n\n\t/**\n\t* Trap for retrieving property values.\n\t*\n\t* @private\n\t* @param {Object} target - target object\n\t* @param {(string|symbol)} property - property name\n\t* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n\t* @throws {Error} invalid slice operation\n\t* @throws {RangeError} number of slice dimensions must match the number of ndarray dimensions\n\t* @returns {*} result\n\t*/\n\tfunction get( target, property, receiver ) {\n\t\tif ( isIntegerString( property ) ) {\n\t\t\treturn getElement( target, property, ctx );\n\t\t}\n\t\tif ( hasProperty( target, property ) || !isString( property ) ) {\n\t\t\treturn getValue( target, property, receiver, ctx );\n\t\t}\n\t\tif ( isCartesianIndexString( property ) ) {\n\t\t\treturn getCartesian( target, property, ctx );\n\t\t}\n\t\tif ( isArrayIndexString( property ) ) {\n\t\t\t// FIXME\n\t\t\treturn;\n\t\t}\n\t\treturn getSlice( target, property, ctx );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getShape = require( '@stdlib/ndarray-base-shape' );\nvar resolveSubscripts = require( './resolve_subscripts.js' );\n\n\n// MAIN //\n\n/**\n* Sets the element associated with a specified set of subscripts.\n*\n* @private\n* @param {ndarrayLike} target - target object\n* @param {string} property - index string\n* @param {*} value - new value\n* @param {Object} ctx - context object\n* @param {string} ctx.dtype - target ndarray data type\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.validator - function for validating new values\n* @param {(Function|null)} ctx.preSetElement - function for normalizing new values (if necessary)\n* @throws {TypeError} assigned value cannot be safely cast to the target ndarray data type\n* @throws {TypeError} target ndarray must have a supported data type\n* @throws {RangeError} index exceeds ndarray bounds\n* @throws {RangeError} number of indices must match the number of ndarray dimensions\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction setCartesian( target, property, value, ctx ) {\n\tvar args;\n\tvar err;\n\tvar v;\n\n\terr = ctx.validator( value, ctx.dtype );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( ctx.preSetElement ) {\n\t\tv = ctx.preSetElement( value );\n\t} else {\n\t\tv = value;\n\t}\n\targs = resolveSubscripts( property, getShape( target, false ), ctx.strict );\n\tif ( args === void 0 ) {\n\t\treturn false;\n\t}\n\targs.push( v );\n\n\t// Use the `set` method, which we expect every ndarray-like object to have, in order to set a single element:\n\ttarget.set.apply( target, args );\n\n\treturn true;\n}\n\n\n// EXPORTS //\n\nmodule.exports = setCartesian;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets the element associated with a specified index.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - index string\n* @param {*} value - new value\n* @param {Object} ctx - context object\n* @param {Function} ctx.setter - accessor for setting ndarray elements\n* @param {string} ctx.dtype - target ndarray data type\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.validator - function for validating new values\n* @param {(Function|null)} ctx.preSetElement - function for normalizing new values (if necessary)\n* @throws {TypeError} assigned value cannot be safely cast to the target ndarray data type\n* @throws {TypeError} target ndarray must have a supported data type\n* @throws {RangeError} index exceeds ndarray bounds\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction setElement( target, property, value, ctx ) {\n\tvar err;\n\tvar v;\n\n\terr = ctx.validator( value, ctx.dtype );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( ctx.preSetElement ) {\n\t\tv = ctx.preSetElement( value );\n\t} else {\n\t\tv = value;\n\t}\n\treturn ctx.setter( target, property, v, ctx.strict );\n}\n\n\n// EXPORTS //\n\nmodule.exports = setElement;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets the value associated with a specified property.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property\n* @param {*} value - new value\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction setValue( target, property, value ) {\n\ttarget[ property ] = value;\n\treturn true;\n}\n\n\n// EXPORTS //\n\nmodule.exports = setValue;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sliceAssign = require( '@stdlib/ndarray-base-slice-assign' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isComplexLike = require( '@stdlib/assert-is-complex-like' );\nvar isComplexDataType = require( '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type' );\nvar isFloatingDataType = require( '@stdlib/ndarray-base-assert-is-floating-point-data-type' );\nvar isUnsignedIntegerDataType = require( '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type' );\nvar isSignedIntegerDataType = require( '@stdlib/ndarray-base-assert-is-signed-integer-data-type' );\nvar isSafeCast = require( '@stdlib/ndarray-base-assert-is-safe-data-type-cast' );\nvar INT8_MAX = require( '@stdlib/constants-int8-max' );\nvar INT16_MAX = require( '@stdlib/constants-int16-max' );\nvar INT32_MAX = require( '@stdlib/constants-int32-max' );\nvar minDataType = require( '@stdlib/ndarray-min-dtype' );\nvar complexDataType = require( '@stdlib/complex-dtype' );\nvar scalar2ndarray = require( '@stdlib/ndarray-from-scalar' );\nvar format = require( '@stdlib/string-format' );\nvar errMessage = require( './error_message.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns an options object for creating an ndarray from a scalar value.\n*\n* @private\n* @param {string} dtype - output array data type\n* @returns {Object} options\n*/\nfunction options( dtype ) {\n\treturn {\n\t\t'dtype': dtype\n\t};\n}\n\n\n// MAIN //\n\n/**\n* Sets element values belonging to the ndarray view specified by an indexing expression.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - indexing expression\n* @param {*} value - new value\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @param {Object} ctx - context object\n* @param {string} ctx.dtype - ndarray data type\n* @param {Function} ctx.prop2slice - function for converting an indexing expression to a slice\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {Error} assigned value must be broadcast compatible with target array view\n* @throws {TypeError} assigned value cannot be safely cast to the target array data type\n* @throws {TypeError} target array must have a supported data type\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction setSlice( target, property, value, receiver, ctx ) {\n\tvar vdt;\n\tvar dt;\n\tvar s;\n\n\ts = ctx.prop2slice( target, property, ctx.strict );\n\tif ( s === null ) {\n\t\t// If unable to parse the property as an indexing expression, signal that we were unable to perform slice assignment:\n\t\treturn false;\n\t}\n\tif ( !isndarrayLike( value ) ) {\n\t\tdt = ctx.dtype;\n\n\t\t// If the target array data type is \"generic\", we can just go ahead and \"cast\" to the target array data type...\n\t\tif ( dt === 'generic' ) {\n\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t}\n\t\t// If the input value is a real-valued number, we need to inspect the value to determine whether we can safely cast the value to the target array data type...\n\t\telse if ( isNumber( value ) ) {\n\t\t\t// If the target array has a floating-point data type, we can just go ahead and cast the input scalar to the target array data type, as number literals are, by default, double-precision floating-point values and casting to lower-precision floating-point is allowed...\n\t\t\tif ( isFloatingDataType( dt ) ) {\n\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t}\n\t\t\t// If the target array has an unsigned integer data type, then the assigned value must be a compatible nonnegative integer value...\n\t\t\telse if ( isUnsignedIntegerDataType( dt ) ) {\n\t\t\t\tvdt = minDataType( value ); // note: we rely on data type resolution to handle the case where `value` is a non-integer value. In that case, `vdt` will resolve to a floating-point data type and `isSafeCast` will evaluate to `false`\n\t\t\t\tif ( isSafeCast( vdt, dt ) ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the target array has a signed integer data type, then the assigned value must be a compatible integer value...\n\t\t\telse if ( isSignedIntegerDataType( dt ) ) {\n\t\t\t\tif ( !isInteger( value ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', minDataType( value ), dt ) );\n\t\t\t\t}\n\t\t\t\t// Manually resolve the minimum data type of the closest \"kind\" necessary for storing a scalar value, as `minDataType()` defaults to unsigned integer data types when a scalar value is greater than or equal to zero...\n\t\t\t\tif ( value < 0 ) {\n\t\t\t\t\tvdt = minDataType( value );\n\t\t\t\t} else if ( value <= INT8_MAX ) { // TODO: consider moving this logic to `@stdlib/ndarray/base/min-signed-intger-dtype` where the interface can assume that `value` is integer-valued\n\t\t\t\t\tvdt = 'int8';\n\t\t\t\t} else if ( value <= INT16_MAX ) {\n\t\t\t\t\tvdt = 'int16';\n\t\t\t\t} else if ( value <= INT32_MAX ) {\n\t\t\t\t\tvdt = 'int32';\n\t\t\t\t} else {\n\t\t\t\t\tvdt = 'float64';\n\t\t\t\t}\n\t\t\t\tif ( isSafeCast( vdt, dt ) ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the target array has \"binary\" data type, then the assigned value must be a compatible nonnegative integer value...\n\t\t\telse if ( dt === 'binary' ) {\n\t\t\t\tvdt = minDataType( value );\n\t\t\t\tif ( vdt === 'uint8' ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If we reach this point, we must be dealing with an unexpected target array data type...\n\t\t\telse {\n\t\t\t\t// Raise an exception in order to flag that, in order to perform assignment, we need to add explicit support for additional data types:\n\t\t\t\tthrow new TypeError( format( 'invalid operation. Unsupported target array data type. Data type: `%s`.', dt ) );\n\t\t\t}\n\t\t}\n\t\t// If the target array is not \"generic\" and the input value is a complex number, then the target array data type must also have a complex number data type...\n\t\telse if ( isComplexLike( value ) ) {\n\t\t\tif ( !isComplexDataType( dt ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', complexDataType( value ), dt ) );\n\t\t\t}\n\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t}\n\t\t// If the target array is not \"generic\" and the input value is neither a real- or complex-valued number, raise an exception in order to flag that, in order to perform assignment, we need to add explicit support for additional data types...\n\t\telse {\n\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', typeof value, dt ) );\n\t\t}\n\t}\n\ttry {\n\t\tsliceAssign( value, receiver, s, ctx.strict );\n\t} catch ( err ) {\n\t\tthrow new err.constructor( errMessage( err.message ) );\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nmodule.exports = setSlice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar hasProperty = require( '@stdlib/assert-has-property' );\nvar isCartesianIndexString = require( './is_cartesian_index_string.js' );\nvar isArrayIndexString = require( './is_ndindex_string.js' );\nvar isIntegerString = require( './is_integer_string.js' );\nvar setCartesian = require( './set_cartesian.js' );\nvar setElement = require( './set_element.js' );\nvar setValue = require( './set_value.js' );\nvar setSlice = require( './set_slice.js' );\n\n\n// MAIN //\n\n/**\n* Returns a trap for setting property values.\n*\n* @private\n* @param {Object} ctx - context object\n* @param {string} ctx.dtype - ndarray data type\n* @param {boolean} ctx.strict - boolean indicating whether to enforce strict bounds checking\n* @param {Function} ctx.validator - function for validating new values\n* @param {(Function|null)} ctx.preSetElement - function for normalizing new values (if necessary)\n* @param {Function} ctx.prop2slice - function for converting an indexing expression to a slice\n* @returns {Function} handler\n*/\nfunction factory( ctx ) {\n\treturn set;\n\n\t/**\n\t* Trap for setting property values.\n\t*\n\t* @private\n\t* @param {Object} target - target object\n\t* @param {(string|symbol)} property - property name\n\t* @param {*} value - new value\n\t* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n\t* @throws {Error} invalid slice operation\n\t* @throws {RangeError} number of slice dimensions must match the number of ndarray dimensions\n\t* @throws {Error} assigned value must be broadcast compatible with output ndarray view\n\t* @throws {TypeError} assigned value cannot be safely cast to the output ndarray data type\n\t* @returns {boolean} boolean indicating whether assignment succeeded\n\t*/\n\tfunction set( target, property, value, receiver ) {\n\t\tvar out;\n\t\tif ( hasProperty( target, property ) || !isString( property ) ) {\n\t\t\treturn setValue( target, property, value, ctx );\n\t\t}\n\t\tif ( isIntegerString( property ) ) {\n\t\t\treturn setElement( target, property, value, ctx );\n\t\t}\n\t\tif ( isCartesianIndexString( property ) ) {\n\t\t\treturn setCartesian( target, property, value, ctx );\n\t\t}\n\t\tif ( isArrayIndexString( property ) ) {\n\t\t\t// FIXME\n\t\t\treturn false;\n\t\t}\n\t\tout = setSlice( target, property, value, receiver, ctx );\n\t\tif ( out ) {\n\t\t\treturn out;\n\t\t}\n\t\t// If we were unsuccessful (e.g., due to an invalid subsequence, etc), set the \"property\" in the same way as would any normal property (e.g., if an indexing expression is an invalid subsequence, assign as would a regular property: `i = 'a:b:c'` => `x[i] = 1` => `v = x[i]` => `v === 1`):\n\t\treturn setValue( target, property, value, ctx );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar Proxy = require( '@stdlib/proxy-ctor' );\nvar ndarray = require( '@stdlib/ndarray-ctor' );\nvar ndarraylike2object = require( '@stdlib/ndarray-base-ndarraylike2object' );\nvar assign = require( '@stdlib/object-assign' );\nvar format = require( '@stdlib/string-format' );\nvar hasProxySupport = require( './has_proxy_support.js' );\nvar setElementWrapper = require( './set_element_wrapper.js' );\nvar getArrayWrapper = require( './get_ndarray_wrapper.js' );\nvar defaults = require( './defaults.js' );\nvar validate = require( './validate.js' );\nvar validator = require( './validator.js' );\nvar prop2slice = require( './prop2slice.js' );\nvar ctor = require( './ctor.js' );\nvar getter = require( './getter.js' );\nvar setter = require( './setter.js' );\nvar get = require( './get.js' );\nvar set = require( './set.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for converting an ndarray to an object supporting fancy indexing.\n*\n* @param {Options} options - function options\n* @param {boolean} [options.strict=false] - boolean indicating whether to enforce strict bounds checking by default\n* @param {Function} [options.cache] - default cache for resolving ndarray index objects\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} function for converting an ndarray to an object supporting fancy indexing\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = new ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var ndarray2fancy = factory();\n*\n* var y = ndarray2fancy( x );\n* // returns <ndarray>\n*\n* var v = y[ '1:,:' ];\n* // returns <ndarray>\n*/\nfunction factory() {\n\tvar OPTIONS;\n\tvar err;\n\n\tOPTIONS = defaults();\n\tif ( arguments.length ) {\n\t\terr = validate( OPTIONS, arguments[ 0 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\treturn ndarray2fancy;\n\n\t/**\n\t* Converts an ndarray to an object supporting fancy indexing.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @param {Options} [options] - function options\n\t* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n\t* @param {Function} [options.cache] - cache for resolving array index objects\n\t* @throws {TypeError} first argument must be ndarray-like\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ndarrayLike} fancy ndarray\n\t*/\n\tfunction ndarray2fancy( x ) {\n\t\tvar opts;\n\t\tvar err;\n\t\tvar arr;\n\t\tvar dt;\n\t\tvar o;\n\n\t\tif ( !isndarrayLike( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( hasProxySupport ) {\n\t\t\topts = assign( {}, OPTIONS );\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\terr = validate( opts, arguments[ 1 ] );\n\t\t\t\tif ( err ) {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr = ndarraylike2object( x );\n\t\t\tdt = arr.dtype || '';\n\t\t\to = {\n\t\t\t\t'ref': x,\n\t\t\t\t'dtype': dt,\n\t\t\t\t'getter': getter( x ),\n\t\t\t\t'setter': setter( x ),\n\t\t\t\t'preSetElement': setElementWrapper( dt ),\n\t\t\t\t'postGetArray': getArrayWrapper( ndarray2fancy, opts ),\n\t\t\t\t'cache': opts.cache,\n\t\t\t\t'strict': opts.strict,\n\t\t\t\t'validator': validator( dt ),\n\t\t\t\t'ndarray2fancy': ndarray2fancy,\n\t\t\t\t'ctor': new Proxy( x.constructor || ndarray, {\n\t\t\t\t\t'construct': ctor( ndarray2fancy, opts )\n\t\t\t\t}),\n\t\t\t\t'prop2slice': prop2slice( arr.shape.length ) // WARNING: we assume a fixed number of dimensions!\n\t\t\t};\n\t\t\treturn new Proxy( x, {\n\t\t\t\t'get': get( o ),\n\t\t\t\t'set': set( o )\n\t\t\t});\n\t\t}\n\t\t// TODO: replace with `@stdlib/console/warn` (or equivalent once available)\n\t\tconsole.warn( 'WARNING: Proxy objects are not supported in the current environment. Some fancy functionality may not be available.' ); // eslint-disable-line no-console\n\t\treturn x;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Converts an ndarray to an object supporting fancy indexing.\n*\n* @name ndarray2fancy\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {Options} [options] - function options\n* @param {boolean} [options.strict=false] - boolean indicating whether to enforce strict bounds checking\n* @param {Function} [options.cache] - cache for resolving ndarray index objects\n* @throws {TypeError} first argument must be ndarray-like\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndarrayLike} fancy ndarray\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = new ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var y = ndarray2fancy( x );\n* // returns <ndarray>\n*\n* var v = y[ '1:,:' ];\n* // returns <ndarray>\n*/\nvar ndarray2fancy = factory();\n\n\n// EXPORTS //\n\nmodule.exports = ndarray2fancy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an ndarray to an object supporting fancy indexing.\n*\n* @module @stdlib/ndarray-to-fancy\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2fancy = require( '@stdlib/ndarray-to-fancy' );\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = new ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var y = ndarray2fancy( x );\n* // returns <ndarray>\n*\n* var v = y[ '1:,:' ];\n* // returns <ndarray>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar ndindex = require( '@stdlib/ndarray-index' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\nsetReadOnly( main, 'idx', ndindex );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_has_proxy_support", "__commonJSMin", "exports", "module", "Proxy", "hasSupport", "require_set_element_wrapper", "__commonJSMin", "exports", "module", "isComplexDataType", "isNumber", "wrapComplex", "value", "wrapper", "dtype", "require_get_ndarray_wrapper", "__commonJSMin", "exports", "module", "wrapper", "ndarray2fancy", "opts", "wrap", "x", "require_defaults", "__commonJSMin", "exports", "module", "ndindex", "defaults", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isMethodIn", "format", "validate", "opts", "options", "require_validator", "__commonJSMin", "exports", "module", "isNumber", "isInteger", "isBoolean", "isComplexLike", "isRealFloatingDataType", "isUnsignedIntegerDataType", "isSignedIntegerDataType", "isBooleanDataType", "isSafeCast", "minDataType", "minSignedIntegerDataType", "complexDataType", "format", "validateGeneric", "validateBoolean", "value", "dtype", "validateRealFloating", "validateComplexFloating", "validateSignedInteger", "vdt", "validateUnsignedInteger", "validator", "require_is_multislice_string", "__commonJSMin", "exports", "module", "startsWith", "isMultiSliceString", "prop", "require_is_slice_string", "__commonJSMin", "exports", "module", "startsWith", "isSliceString", "prop", "require_re_integer", "__commonJSMin", "exports", "module", "RE_INTEGER", "require_is_integer_string", "__commonJSMin", "exports", "module", "isString", "RE_INTEGER", "isIntegerString", "prop", "require_re_subseq", "__commonJSMin", "exports", "module", "RE_SUBSEQ", "require_is_subsequence_string", "__commonJSMin", "exports", "module", "RE_SUBSEQ", "isSubsequenceString", "prop", "require_is_ellipsis_string", "__commonJSMin", "exports", "module", "isEllipsisString", "prop", "require_is_empty_string", "__commonJSMin", "exports", "module", "isEmptyString", "prop", "require_parse_multislice", "__commonJSMin", "exports", "module", "str2multislice", "format", "parseMultiSlice", "raw", "str", "s", "require_parse_slice", "__commonJSMin", "exports", "module", "str2slice", "MultiSlice", "format", "parseSlice", "raw", "str", "s", "require_parse_integer", "__commonJSMin", "exports", "module", "MultiSlice", "parseInteger", "raw", "str", "require_prop2slice_0d", "__commonJSMin", "exports", "module", "trim", "replace", "MultiSlice", "seq2multislice", "getShape", "format", "isMultiSlice", "isSlice", "isInteger", "isSubsequence", "isEllipsis", "isEmptyString", "parseMultiSlice", "parseSlice", "parseInteger", "parseSubsequence", "raw", "str", "shape", "s", "prop2slice", "target", "property", "prop", "require_prop2slice_1d", "__commonJSMin", "exports", "module", "trim", "replace", "seq2multislice", "getShape", "format", "isSlice", "isMultiSlice", "isInteger", "isSubsequence", "isEllipsis", "parseMultiSlice", "parseSlice", "parseInteger", "parseSubsequence", "raw", "str", "shape", "strict", "s", "prop2slice", "target", "property", "prop", "require_prop2slice_nd", "__commonJSMin", "exports", "module", "trim", "replace", "seq2multislice", "sargs2multislice", "getShape", "format", "isSubsequence", "isEllipsis", "isMultiSlice", "isEmptyString", "parseMultiSlice", "parseSubsequence", "raw", "str", "shape", "strict", "s", "prop2slice", "target", "property", "prop", "require_prop2slice", "__commonJSMin", "exports", "module", "prop2slice0d", "prop2slice1d", "prop2slicend", "prop2slice", "ndims", "require_ctor", "__commonJSMin", "exports", "module", "factory", "ndarray2fancy", "opts", "constructor", "target", "args", "x", "require_resolve_index", "__commonJSMin", "exports", "module", "normalizeIndex", "format", "resolveIndex", "str", "max", "strict", "idx", "i", "require_getter", "__commonJSMin", "exports", "module", "isMethodIn", "getShape", "getStrides", "getOrder", "numel", "ind2sub", "resolveIndex", "iget", "x", "idx", "strict", "get", "sub", "sh", "getter", "require_setter", "__commonJSMin", "exports", "module", "isMethodIn", "getShape", "getStrides", "getOrder", "numel", "ind2sub", "resolveIndex", "iset", "x", "idx", "value", "strict", "set", "sub", "sh", "setter", "require_re_ndindex", "__commonJSMin", "exports", "module", "RE_NDINDEX", "require_is_ndindex_string", "__commonJSMin", "exports", "module", "isString", "RE_NDINDEX", "isArrayIndexString", "prop", "require_re_cartesian_index", "__commonJSMin", "exports", "module", "RE_CARTESIAN_INDEX", "require_is_cartesian_index_string", "__commonJSMin", "exports", "module", "RE_CARTESIAN_INDEX", "isCartesianIndexString", "prop", "require_get_element", "__commonJSMin", "exports", "module", "scalar2ndarrayLike", "getElement", "target", "property", "ctx", "v", "require_resolve_subscripts", "__commonJSMin", "exports", "module", "format", "resolveIndex", "resolveSubscripts", "str", "shape", "strict", "ndims", "out", "idx", "i", "require_get_cartesian", "__commonJSMin", "exports", "module", "scalar2ndarrayLike", "getShape", "resolveSubscripts", "getCartesian", "target", "property", "ctx", "sub", "v", "require_get_value", "__commonJSMin", "exports", "module", "isFunction", "getValue", "target", "property", "receiver", "ctx", "value", "wrapper", "args", "i", "require_error_message", "__commonJSMin", "exports", "module", "replace", "errMessage", "msg", "require_get_slice", "__commonJSMin", "exports", "module", "slice", "errMessage", "getSlice", "target", "property", "ctx", "s", "err", "require_get", "__commonJSMin", "exports", "module", "isString", "hasProperty", "isIntegerString", "isArrayIndexString", "isCartesianIndexString", "getElement", "getCartesian", "getValue", "getSlice", "factory", "ctx", "get", "target", "property", "receiver", "require_set_cartesian", "__commonJSMin", "exports", "module", "getShape", "resolveSubscripts", "setCartesian", "target", "property", "value", "ctx", "args", "err", "v", "require_set_element", "__commonJSMin", "exports", "module", "setElement", "target", "property", "value", "ctx", "err", "v", "require_set_value", "__commonJSMin", "exports", "module", "setValue", "target", "property", "value", "require_set_slice", "__commonJSMin", "exports", "module", "sliceAssign", "isndarrayLike", "isNumber", "isInteger", "isComplexLike", "isComplexDataType", "isFloatingDataType", "isUnsignedIntegerDataType", "isSignedIntegerDataType", "isSafeCast", "INT8_MAX", "INT16_MAX", "INT32_MAX", "minDataType", "complexDataType", "scalar2ndarray", "format", "errMessage", "options", "dtype", "setSlice", "target", "property", "value", "receiver", "ctx", "vdt", "dt", "s", "err", "require_set", "__commonJSMin", "exports", "module", "isString", "hasProperty", "isCartesianIndexString", "isArrayIndexString", "isIntegerString", "setCartesian", "setElement", "setValue", "setSlice", "factory", "ctx", "set", "target", "property", "value", "receiver", "out", "require_factory", "__commonJSMin", "exports", "module", "isndarrayLike", "Proxy", "ndarray", "ndarraylike2object", "assign", "format", "hasProxySupport", "setElementWrapper", "getArrayWrapper", "defaults", "validate", "validator", "prop2slice", "ctor", "getter", "setter", "get", "set", "factory", "OPTIONS", "err", "ndarray2fancy", "x", "opts", "arr", "dt", "o", "require_main", "__commonJSMin", "exports", "module", "factory", "ndarray2fancy", "setReadOnly", "ndindex", "main", "factory"]
}
